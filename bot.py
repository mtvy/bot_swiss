from lib import *


account_settings = database.get_accounts_data()

def openfileforRead(action=None, name_path=None):
    global account_settings
    if action == 'set':
        with open(path_acc_settings, 'r') as file_set:
            if(file_set.readline() == ""): 
                account_settings = {}
            else:
                file_set.close()
                with open(path_acc_settings, 'r') as file_set:
                    account_settings = json.load(file_set)
        return account_settings
    elif action == 'r':
        with open(path_acc_settings, 'r') as file_set:
            if(file_set.readline() == ""): 
                account_settings = {}
            else:
                file_set.close()
                with open(path_acc_settings, 'r') as file_set:
                    account_settings = json.load(file_set)
    elif action == 'w+':
        with open(path_acc_settings, 'w+') as f:
            json.dump(account_settings, f, indent='    ')
    else:
        file_text = ''
        with io.open(name_path, encoding='utf-8') as file_set:
                        for i in file_set:
                            file_text += i
        return file_text

def saveNewText(message, name_path):
    word = message.text
    with open(name_path, 'w', encoding='utf-8') as f:
        f.write(word)
    bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


bot = telebot.TeleBot(config.TOKEN)


def start_process(): ### –ó–∞–ø—É—Å–∫ Process
    _ = Process(target=P_schedule.start_schedule, args=()).start()
class P_schedule(): ### Class –¥–ª—è —Ä–∞–±–æ—Ç—ã c schedule
    def start_schedule(self): ### –ó–∞–ø—É—Å–∫ schedule
        
        ### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è schedule
        schedule.every(30).seconds.do(P_schedule.send_post)

        ### –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
        while True:
            schedule.run_pending()
            time.sleep(1)
    def send_post(self): ### –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        global MESSAGE_ID
        global account_settings
        global message_ids_dict
        c_ex = 0

        account_settings = database.get_accounts_data()

        for account in account_settings.keys():
            try:
                time_checker = int(time.time()) - account_settings[account].timer_conv
                if time_checker > 900 and account_settings[account].conversation == 'open':
                    if account_settings[account].language == '–†—É—Å—Å–∫–∏–π':
                        stopConversation(None, 0, account)
                    else:
                        stopConversation(None, 1, account)
            except Exception as _:
                pass
            try:
                bot.forward_message(int(account), -1001229753165, MESSAGE_ID)
            except Exception as _:
                c_ex+=1
                continue
        if c_ex == len(account_settings):
            c_ex = 0
        else:
            try:
                bot.forward_message(281321076, -1001229753165, MESSAGE_ID)
                MESSAGE_ID += 1
            except Exception as qt:
                print("Error pushing news!", repr(qt))
                for id_er in label_change_ids_arr:
                    bot.send_message(int(id_er), "Error pushing news!" + repr(qt))


@bot.message_handler(commands=['start'])
def welcome(message):
    global account_settings
    
    account_settings = database.get_accounts_data()

    new_account = [str(message.chat.id)]
    for account in account_settings.keys():
        if account_settings[account].telegram_id == new_account[0]:
            start_txt=''
            if account_settings[account].language == "–†—É—Å—Å–∫–∏–π":
                if account_settings[account].personal_data == "YES":
                    bot.send_message(message.chat.id,"üî±–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
                    keyboardRefMaker(message, 0)
                elif account_settings[account].personal_data == "NO":

                    start_txt = openfileforRead(None, path_first_lang)
                    
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data='–°–æ–≥–ª–∞—Å–µ–Ω')
                    item2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data='–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å')
                    markup.add(item1, item2)
                    bot.send_message(message.chat.id, start_txt.format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
            else:
                if account_settings[account].personal_data == "YES":
                    bot.send_message(message.chat.id,"üî±Siz allaqachon ro'yxatdan o'tgansiz!")
                    keyboardRefMaker(message, 1)
                elif account_settings[account].personal_data == "NO":

                    start_txt = openfileforRead(None, path_second_lang)
                    
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    item1 = types.InlineKeyboardButton("ROZIMAN", callback_data='Agree')
                    item2 = types.InlineKeyboardButton("Qo'shilmayman", callback_data='Disagree')
                    markup.add(item1, item2)
                    bot.send_message(message.chat.id, start_txt.format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
            break
    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='–†—É—Å—Å–∫–∏–π')
        item2 = types.InlineKeyboardButton("Ozbek", callback_data="Ozbek")
        markup.add(item1, item2)
        
        new_account += [str(message.chat.username), str(message.chat.first_name), [], "close", "0", [], "0", "NO", None, 'close']
        
        account = classes.Account(new_account)
        database.insert_account_data(account)
        account_settings[account.telegram_id] = account

        bot.send_message(message.chat.id,"üî±Choose language", reply_markup=markup)

@bot.message_handler(commands=['changeLabel'])
def adderNewLabel(message):
    if checkOperId(str(message.chat.id), 'check_label_changer'):
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data='–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç')
        item2 = types.InlineKeyboardButton("FAQ —Ç–µ–∫—Å—Ç", callback_data='FAQ —Ç–µ–∫—Å—Ç')
        item3 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data='–¢–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')
        item4 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data='–¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')
        item5 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='–¢–µ–∫—Å—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        item6 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç –∞–¥—Ä–µ—Å—Å–∞", callback_data='–¢–µ–∫—Å—Ç –∞–¥—Ä–µ—Å—Å–∞')
        item7 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", callback_data='–¢–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞')
        item8 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞", callback_data='–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞')
        item9 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏", callback_data='–¢–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏')
        item10 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", callback_data='–¢–µ–∫—Å—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏')
        markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10)
        bot.send_message(message.chat.id,"–ö–∞–∫–æ–π –±–ª–æ–∫ –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)


def sendReqtoOper(message, which_oper, oper_send_text, markup):
    if which_oper == 'simple_oper':
        for oper_id in simple_oper_ids_arr:
            bot.send_message(int(oper_id), oper_send_text, reply_markup=markup)
    elif which_oper == 'doc_oper':
        for oper_id in doctor_oper_ids_arr:
            bot.send_message(int(oper_id), oper_send_text, reply_markup=markup)
    elif which_oper == 'dir_oper':
        for oper_id in director_oper_ids_arr:
            bot.send_message(int(oper_id), oper_send_text, reply_markup=markup)
    elif which_oper == 'sup_oper':
        for oper_id in support_oper_ids_arr:
            bot.send_message(int(oper_id), oper_send_text, reply_markup=markup)

def operKeyboardMaker(message, which_oper, lang):
    global account_settings
    global message_ids_dict
    account_settings[str(message.chat.id)].conversation = 'mid'
    message_ids_dict[str(message.chat.id)] = message
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == 0:
        item1 = types.KeyboardButton("üîô –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        item2 = types.KeyboardButton("‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "üôã –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=markup)
    elif lang == 1:
        item1 = types.KeyboardButton("üîô Operator chaqiruvini rad etish")
        item2 = types.KeyboardButton("‚ùî Ko'rsatma")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "üôã Operator bilan yozishmalar rejimi yoqilgan", reply_markup=markup)
    oper_send_text = "-------–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–ø–∏—Å–∫–∏!-------\nid: "
    oper_send_text += str(message.chat.id)
    oper_send_text += "\n–ò–º—è: "
    oper_send_text += str(message.chat.first_name)
    oper_send_text += "\n–§–∞–º–∏–ª–∏—è: "
    oper_send_text += str(message.chat.last_name)
    oper_send_text += "\nUsername: @"
    oper_send_text += str(message.chat.username)
    oper_send_text += "\n–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n----------------------------"
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=str(message.chat.id))
    markup.add(item1)
    user_id = str(message.chat.id)
    oper_id = '0'
    database.insert_new_data(user_id, oper_id, bot)
    sendReqtoOper(message, which_oper, oper_send_text, markup)
		

def dbDateSortEnter(message):
    send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ (2000-1-12)')
    bot.register_next_step_handler(send, dbSortEnter)
def feedBackdbDateSortEnter(message):
    send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ (2000-1-12)')
    bot.register_next_step_handler(send, FeedBackdbSortEnter)


def dbSortEnter(message):
    date_text = message.text
    date_text = database.getDataFromDB(date_text, bot)
    if date_text == '0':
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ!')
        return
    else: bot.send_message(message.chat.id, date_text)
    send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω—É–∂–Ω–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ id')
    bot.register_next_step_handler(send, dbIdSortEnter)
def FeedBackdbSortEnter(message):
    date_text = message.text
    date_text = database.getDataFromFeedBackDB(date_text, bot)
    if date_text == '0':
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ!')
        return
    else: bot.send_message(message.chat.id, date_text)
    send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω—É–∂–Ω–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ id')
    bot.register_next_step_handler(send, FeedBackdbIdSortEnter)

def dbIdSortEnter(message):
    id_text = message.text
    id_text = database.getTextFromDB(id_text, bot)
    if id_text == '0':
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ!')
        return
    else: bot.send_message(message.chat.id, id_text)
def FeedBackdbIdSortEnter(message):
    id_text = message.text
    id_text = database.getTextFromFeedBackDB(id_text, bot)
    if id_text == '0':
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ!')
        return
    else: bot.send_message(message.chat.id, id_text)


def pushingLabelFromFile(message, path, path_sec):
    label_text = ''
    if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
        label_text = openfileforRead(None, path)
    else:
        label_text = openfileforRead(None, path_sec)
    bot.send_message(message.chat.id, label_text.format(message.chat, bot.get_me()),parse_mode='html')

def operInit(message, action, set_act, id_check, deactivation=None):
    if checkOperId(str(message.chat.id), action):
        if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
            operKeyboardMaker(message, set_act, 0)
        else:
            operKeyboardMaker(message, set_act, 1)
    else:
        bot.send_message(message.chat.id, "–í—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä!")
        
def redirectInit(message, action):
    bot.send_message(str(message.chat.id), action)
    if len(account_settings[str(message.chat.id)].tags) != 0:

        bot.send_message(str(account_settings[str(message.chat.id)].tags[0]), action)
        account_settings[account_settings[str(message.chat.id)].tags[0]].conversation = 'close'
        account_settings[account_settings[str(message.chat.id)].tags[0]].tags.clear()
                
        #change_account_data(account=, parametr, data)
        #database.insert_account_data(account)
        #account_settings[account.telegram_id] = account
        #openfileforRead('r')

        if account_settings[account_settings[str(message.chat.id)].tags[0]].language == "–†—É—Å—Å–∫–∏–π":
            keyboardRefMaker(message, 0, account_settings[str(message.chat.id)].tags[0])
        else:
            keyboardRefMaker(message, 1, account_settings[str(message.chat.id)].tags[0])

    keyboardRefMaker(message, 0)
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("üëç", callback_data='üëç')
    item2 = types.InlineKeyboardButton("üëé", callback_data="üëé")
    markup.add(item1, item2)
    if checkOperId(str(message.chat.id), 'check_all_oper'):
        if account_settings[account_settings[str(message.chat.id)].tags[0]].language == "–†—É—Å—Å–∫–∏–π":
            bot.send_message(account_settings[str(message.chat.id)].tags[0], '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!', reply_markup=markup)
        else: bot.send_message(account_settings[str(message.chat.id)].tags[0], 'Operator ishini baholang!', reply_markup=markup)
    else:
        if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                    bot.send_message(str(message.chat.id), '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!', reply_markup=markup)
        else: bot.send_message(str(message.chat.id), 'Operator ishini baholang!', reply_markup=markup)
        
def stopConversation(message, lang, pers_id=None):
    if pers_id!=None:
        person_id = pers_id
    else:
        person_id = str(message.chat.id)
    if lang == 0: 
        push_text = "‚ùó –û–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    else:
        push_text = "‚ùó Operator bilan aloqa yakunlandi"

    bot.send_message(person_id, push_text)
    if len(account_settings[person_id].tags) != 0:
        bot.send_message(str(account_settings[person_id].tags[0]), push_text)
        account_settings[account_settings[person_id].tags[0]].conversation = 'close'
        account_settings[account_settings[person_id].tags[0]].tags.clear()
            
        openfileforRead('w+')
        openfileforRead('r')
        if account_settings[account_settings[person_id].tags[0]].language == "–†—É—Å—Å–∫–∏–π":
            keyboardRefMaker(None, 0, account_settings[person_id].tags[0])
        else:
            keyboardRefMaker(None, 1, account_settings[person_id].tags[0])
    keyboardRefMaker(None, lang, person_id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("üëç", callback_data='üëç')
    item2 = types.InlineKeyboardButton("üëé", callback_data="üëé")
    markup.add(item1, item2)
    if checkOperId(person_id, 'check_all_oper'):
        if account_settings[account_settings[person_id].tags[0]].language == "–†—É—Å—Å–∫–∏–π":
            bot.send_message(account_settings[person_id].tags[0], '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!', reply_markup=markup)
        else: bot.send_message(account_settings[person_id].tags[0], 'Operator ishini baholang!', reply_markup=markup)
    else:
        if account_settings[person_id].language == "–†—É—Å—Å–∫–∏–π":
            bot.send_message(person_id, '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!', reply_markup=markup)
        else: bot.send_message(person_id, 'Operator ishini baholang!', reply_markup=markup)
    account_settings[person_id].conversation = 'close'
    account_settings[person_id].tags.clear()
            
    openfileforRead('w+')
    openfileforRead('r')
            
    database.closerDataBase(person_id, bot)

def closeConversation(message):
    global account_settings
    account_settings[str(message.chat.id)].conversation = 'close'
    account_settings[str(message.chat.id)].tags.clear()
            
    openfileforRead('w+')
    openfileforRead('r')
            
    database.closerDataBase(str(message.chat.id), bot)

@bot.message_handler(content_types=['text', 'photo'])
def lol(message):
    global account_settings
    global message_ids_dict
    global mess
    global feed_back
    openfileforRead('r')
    if message.chat.type == 'private':
        if message.text == 'üìû –¢–µ–ª–µ—Ñ–æ–Ω' or message.text == 'üìû telefon':
            pushingLabelFromFile(message, path_telephone_num, path_sec_telephone_num)
        elif message.text == 'üè† –ê–¥—Ä–µ—Å–∞' or message.text == 'üè† manzillari':
            pushingLabelFromFile(message, path_address_label, path_sec_address_label)
        elif message.text == "üåê –°–æ—Ü. —Å–µ—Ç–∏" or message.text == 'üåê Biz ijtimoiy tarmoqlarda':
            pushingLabelFromFile(message, path_social_web, path_sec_social_web)
        elif message.text == '¬ÆFAQ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' or message.text == "¬ÆFAQ Ko'rsatma":
            pushingLabelFromFile(message, path_FAQ_label, path_sec_FAQ_label)
        elif message.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' or message.text == 'üìù buyurtma yaratish':
            pushingLabelFromFile(message, path_order_label, path_sec_order_label)
        elif message.text == 'üôã –û–ø–µ—Ä–∞—Ç–æ—Ä' or message.text == 'üôã Operator':
            operInit(message, 'check_simple_oper', 'simple_oper', str(message.chat.id))
        elif message.text == 'üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω' or message.text == 'üë®‚Äç‚öïÔ∏è Shifokor onlayn':
            operInit(message, 'check_doc_id', 'doc_oper', str(message.chat.id))
        elif message.text == '‚òéÔ∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞' or message.text == '‚òéÔ∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
            operInit(message, 'check_support_id', 'sup_oper', str(message.chat.id))
        elif message.text == '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—É' or message.text == '‚úçÔ∏è Direktorga yozing':
            operInit(message, 'check_director_id', 'dir_oper', str(message.chat.id))
        elif message.text == '‚ùóÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É' or message.text == '‚ùóÔ∏è Shikoyat qoldiring':
            if checkOperId(str(message.chat.id), 'check_feedback_oper_id'):
                oper_write = ''
                account_settings[str(message.chat.id)].feedback_st = 'open'
                markup = types.InlineKeyboardMarkup(row_width=2)
                if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":

                    oper_write = openfileforRead(None, path_recv_label)
 
                    item1 = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É", callback_data='–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É')
                else:

                    oper_write = openfileforRead(None, path_sec_recv_label)

                    item1 = types.InlineKeyboardButton("Shikoyat yozing", callback_data='Write a feedback')
                markup.add(item1)
                account_settings[str(message.chat.id)].feedback_st = 'open'
                bot.send_message(message.chat.id, oper_write.format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
            else:
                feedBackdbDateSortEnter(message)
        elif message.text == 'üíΩ –ë–î –ø–µ—Ä–µ–ø–∏—Å–æ–∫' or message.text == 'üíΩ Yozishmalar bazasi':
            if checkOperId(str(message.chat.id), 'check_all_oper'):
                dbDateSortEnter(message)
            else:
                if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                    bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –±–∞–∑—ã!')
                else: bot.send_message(message.chat.id, "Sizda bazani o'qish huquqi yo'q!")
        elif message.text == '% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É' or message.text == '% Chegirma oling':
            oper_write = ''
            mess = 'new'
            if (account_settings[str(message.chat.id)].discount == "0" and account_settings[str(message.chat.id)].ref == "0"):
                markup = types.InlineKeyboardMarkup(row_width=2)
                if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":

                    oper_write = openfileforRead(None, path_discount_label)

                    oper_write += "\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: "
                    oper_write += str(message.chat.id)
                    bot.send_message(message.chat.id, oper_write.format(message.chat, bot.get_me()),parse_mode='html')
                else:

                    oper_write = openfileforRead(None, path_sec_discount_label)

                    oper_write += "\nSizning tavsiyangiz kodi: "
                    oper_write += str(message.chat.id)
                    bot.send_message(message.chat.id, oper_write.format(message.chat, bot.get_me()),parse_mode='html')
            elif account_settings[str(message.chat.id)].ref == "10":
                account_settings[str(message.chat.id)].discount = "10"
                
                openfileforRead('w+')
                openfileforRead('r')

                if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                    picPNGmaker(message)
                    bot.send_message(message.chat.id, "‚úÖ –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!")
                else:
                    picPNGmaker(message)
                    bot.send_message(message.chat.id, "‚úÖ Siz maksimal chegirma bor!")
            else:
                if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                    if account_settings[str(message.chat.id)].discount == "10":
                        picPNGmaker(message)
                        bot.send_message(message.chat.id, "‚úÖ –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!")
                    else:
                        text_tags = "‚ùå –í–∞—à–∏ –¥—Ä—É–∑—å—è –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞!\n‚ùå –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π "
                        text_tags += account_settings[str(message.chat.id)].ref
                        text_tags += " –∏–∑ 10"
                        bot.send_message(message.chat.id, text_tags)
                        picPNGmaker(message)
                else:
                    if account_settings[str(message.chat.id)].discount == "10":
                        picPNGmaker(message)
                        bot.send_message(message.chat.id, "‚úÖ Siz maksimal chegirma bor!")
                    else:
                        text_tags = "‚ùå Sizning do'stlaringiz hali botni faollashtirmagan!\n‚ùå Jami aktivatsiyalar "
                        text_tags += account_settings[str(message.chat.id)].ref
                        text_tags += " dan 10"
                        bot.send_message(message.chat.id, text_tags)
                        picPNGmaker(message)
        elif message.text == "üîô –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞":
            stopConversation(message, 0)
        elif message.text == "üîô Operator chaqiruvini rad etish":
            bot.send_message(str(message.chat.id), "‚ùó Operator bilan aloqa yakunlandi")
            stopConversation(message, 1)
        elif message.text == "‚ùóÔ∏è –ñ–∞–ª–æ–±–∞":
            
            redirectInit(message, "‚ùó –û–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª –∂–∞–ª–æ–±")

            oper_write = ''
            account_settings[account_settings[str(message.chat.id)].tags[0]].feedback_st = 'open'
            markup = types.InlineKeyboardMarkup(row_width=2)
            if account_settings[account_settings[str(message.chat.id)].tags[0]].language == "–†—É—Å—Å–∫–∏–π":

                oper_write = openfileforRead(None, path_recv_label)
 
                item1 = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É", callback_data='–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É')
            else:

                oper_write = openfileforRead(None, path_sec_recv_label)

                item1 = types.InlineKeyboardButton("Shikoyat yozing", callback_data='Write a feedback')
            markup.add(item1)
            account_settings[account_settings[str(message.chat.id)].tags[0]].feedback_st = 'open'
            bot.send_message(account_settings[str(message.chat.id)].tags[0], oper_write.format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
            closeConversation(message)        
        elif message.text == "üôã –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è":
            redirectInit(message, "‚ùó –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
            operInit(message_ids_dict[account_settings[str(message.chat.id)].tags[0]], 'check_simple_oper', 'simple_oper', closeConversation(message)) 
        elif message.text == "‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            redirectInit(message, "‚ùó –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É")
            operInit(message_ids_dict[account_settings[str(message.chat.id)].tags[0]], 'check_support_id', 'sup_oper', closeConversation(message)) 
        elif message.text == "‚úçÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä":
            redirectInit(message, "‚ùó –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É")
            operInit(message_ids_dict[account_settings[str(message.chat.id)].tags[0]], 'check_director_id', 'dir_oper', closeConversation(message))    
        elif message.text == "üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä":
            redirectInit(message, "‚ùó –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –¥–æ–∫—Ç–æ—Ä—É")
            operInit(message_ids_dict[account_settings[str(message.chat.id)].tags[0]], 'check_doc_id', 'doc_oper', closeConversation(message))
        elif message.text == "‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
            FAQ_txt = ''

            FAQ_txt = openfileforRead(None, path_FAQoper_label)
            
            bot.send_message(message.chat.id, FAQ_txt.format(message.chat, bot.get_me()),parse_mode='html')
        elif message.text == "‚ùî Ko'rsatma":
            FAQ_txt = ''

            FAQ_txt = openfileforRead(None, path_sec_FAQoper_label)

            bot.send_message(message.chat.id, FAQ_txt.format(message.chat, bot.get_me()),parse_mode='html')
        else:
            if account_settings[str(message.chat.id)]['conversation'] == 'open':
                if checkOperId(str(message.chat.id), 'check_all_oper'):
                    account_settings[account_settings[str(message.chat.id)].tags[0]].timer_conv = int(time.time())
                    sm_id = 'Operator: '
                else: 
                    account_settings[str(message.chat.id)].timer_conv = int(time.time())
                    sm_id = 'User: '
                openfileforRead('w+')
                openfileforRead('r')
                if message.text != None:
                    sm_id = sm_id + message.text + '\n'
                    bot.send_message(account_settings[str(message.chat.id)].tags[0], message.text)
                elif message.caption != None:
                    sm_id = sm_id + message.caption + '\n'
                    bot.send_message(account_settings[str(message.chat.id)].tags[0], message.caption)
                if message.photo != None:
                    sm_id = sm_id + 'PHOTO\n'
                    fileID = message.photo[-1].file_id
                    file_info = bot.get_file(fileID)
                    downloaded_file = bot.download_file(file_info.file_path)
                    bot.send_photo(account_settings[str(message.chat.id)].tags[0], downloaded_file)
                database.insert_text_to_data(sm_id, str(message.chat.id), bot)


def checkOperId(person_id, action):
    if action == 'check_all_oper':
        for pers_id in all_ids_arr:
            if person_id == pers_id:
                return True
        return False
    elif action == 'check_simple_oper':
        for pers_id in simple_oper_ids_arr:
            if person_id == pers_id:
                return False
        return True
    elif action == 'check_doc_id':
        for pers_id in doctor_oper_ids_arr:
            if person_id == pers_id:
                return False
        return True
    elif action == 'check_support_id':
        for pers_id in support_oper_ids_arr:
            if person_id == pers_id:
                return False
        return True
    elif action == 'check_feedback_oper_id':
        for pers_id in feedback_oper_ids_arr:
            if person_id == pers_id:
                return False
        return True
    elif action == 'check_director_id':
        for pers_id in director_oper_ids_arr:
            if person_id == pers_id:
                return False
        return True
    elif action == 'check_label_changer':
        for pers_id in label_change_ids_arr:
            if person_id == pers_id:
                return True
        return False
    

def keyboardRefMaker(message, lang, pers_id=None):
    global account_settings
    if pers_id != None:
        person_id = pers_id
    else:
        person_id = str(message.chat.id)
    if lang == 0:
        if checkOperId(person_id, 'check_all_oper'):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω")
            item2 = types.KeyboardButton("üè† –ê–¥—Ä–µ—Å–∞")
            item4 = types.KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
            item5 = types.KeyboardButton("‚ùóÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É")
            item10 = types.KeyboardButton("üíΩ –ë–î –ø–µ—Ä–µ–ø–∏—Å–æ–∫")
            item6 = types.KeyboardButton("% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É")
            item7 = types.KeyboardButton("¬ÆFAQ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            item9 = types.KeyboardButton("üåê –°–æ—Ü. —Å–µ—Ç–∏")
            markup.add(item1, item2, item4, item9, item5, item10, item6, item7)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω")
            item2 = types.KeyboardButton("üè† –ê–¥—Ä–µ—Å–∞")
            item3 = types.KeyboardButton("üôã –û–ø–µ—Ä–∞—Ç–æ—Ä")
            item4 = types.KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
            item5 = types.KeyboardButton("‚ùóÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É")
            item6 = types.KeyboardButton("% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É")
            item7 = types.KeyboardButton("¬ÆFAQ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            item8 = types.KeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—É")
            item9 = types.KeyboardButton("üåê –°–æ—Ü. —Å–µ—Ç–∏")
            item10 = types.KeyboardButton("‚òéÔ∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
            item11 = types.KeyboardButton("üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω")
            markup.row(item1, item2, item4).row(item6, item7, item9).row(item11).row(item3, item8).row(item5, item10)
        faq_txt = ''

        faq_txt = openfileforRead(None, path_FAQ_label)
        
        if person_id == pers_id:
            bot.send_message(person_id, faq_txt, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, faq_txt.format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
            openfileforRead('r')
            account_settings[str(message.chat.id)].personal_data = "YES"
            openfileforRead('w+')
            openfileforRead('r')
    else:
        if checkOperId(person_id, 'check_all_oper'):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üìû telefon")
            item2 = types.KeyboardButton("üè† manzillari")
            item4 = types.KeyboardButton("üìù buyurtma yaratish")
            item5 = types.KeyboardButton("‚ùóÔ∏è Shikoyat qoldiring")
            item10 = types.KeyboardButton("üíΩ Yozishmalar bazasi")
            item6 = types.KeyboardButton("% Chegirma oling")
            item7 = types.KeyboardButton("¬ÆFAQ Ko'rsatma")
            item9 = types.KeyboardButton("üåê Biz ijtimoiy tarmoqlarda")
            markup.add(item1, item2, item4, item9, item5, item10, item6, item7)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üìû telefon")
            item2 = types.KeyboardButton("üè† manzillari")
            item3 = types.KeyboardButton("üôã Operator")
            item4 = types.KeyboardButton("üìù buyurtma yaratish")
            item5 = types.KeyboardButton("‚ùóÔ∏è Shikoyat qoldiring")
            item6 = types.KeyboardButton("% Chegirma oling")
            item7 = types.KeyboardButton("¬ÆFAQ Ko'rsatma")
            item8 = types.KeyboardButton("‚úçÔ∏è Direktorga yozing")
            item9 = types.KeyboardButton("üåê Biz ijtimoiy tarmoqlarda")
            item10 = types.KeyboardButton("‚òéÔ∏è O'sha.  qo'llab-quvvatlash")
            item11 = types.KeyboardButton("üë®‚Äç‚öïÔ∏è Shifokor onlayn")
            markup.row(item1, item2, item4).row(item6, item7, item9).row(item11).row(item3, item8).row(item5, item10)
        faq_txt = ''

        faq_txt = openfileforRead(None, path_sec_FAQ_label)

        if person_id == pers_id:
            bot.send_message(person_id, faq_txt, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, faq_txt.format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
            openfileforRead('r')
            account_settings[str(message.chat.id)].personal_data = "YES"
            openfileforRead('w+')
            openfileforRead('r')


def checkBlockedPeople(message, markup, pers_id):
    try:
        bot.send_message(pers_id, txt, reply_markup=markup)
    except Exception as e:
        text_push = 'User ' + pers_id + ' blocked!\n\n' + repr(e)
        print(text_push)
        for id_er in label_change_ids_arr:
            bot.send_message(int(id_er), text_push)
        


def fdbackName(message, lang):
    global feed_back
    global account_settings
    name_user = message.text
    if name_user != 'stop':
        if name_user == None: name_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        feed_back[str(message.chat.id)] = {"Name" : name_user, "Username" : str(message.chat.username), "Language" : account_settings[str(message.chat.id)].language}
        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Telefon raqamingizni kiriting')
        bot.register_next_step_handler(send, fdbackTele, lang)
    else:
        bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
def fdbackTele(message, lang):
    global feed_back
    tele_num = message.text
    if tele_num.isdigit() == True:
        if tele_num == None: tele_num = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        feed_back[str(message.chat.id)].update({"Telephone number" : tele_num})
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –ñ–∞–ª–æ–±–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–µ—Ç—ã—Ä–µ —ç—Ç–∞–ø–∞:\n1) –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã\n2) –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞/–º–µ—Å—Ç–∞, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç\n3) –î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞\n4) –ò–º—è –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–æ—à—ë–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop')
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã')
        else:
            bot.send_message(message.chat.id, '‚ûï Shikoyat tort bosqichda tuziladi:\n1) Shikoyat sababi\n2) Hodisa sodir bolgan filial/joyni belgilash\n3) Hodisa sanasi\n4) Mojaro yuz bergan raqibning nomi yoki tarifi\n‚ùå Operatsiyani bekor qilish uchun yozing stop')
            send = bot.send_message(message.chat.id, '‚ûï Shikoyat sababini yozing')
        bot.register_next_step_handler(send, fdbackReason, lang)
    elif tele_num == 'stop':
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')
    else:
        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 998999999999 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Telefon raqamingizni formatda kiriting 9997777777777 yoki yozing stop')
        bot.register_next_step_handler(send, fdbackTele, lang)
def fdbackReason(message, lang):
    global feed_back
    reason_send = message.text
    if reason_send != 'stop':
        if reason_send == None: reason_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        feed_back[str(message.chat.id)].update({"Reason" : reason_send})
        
        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª/–º–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Hodisa sodir bolgan filial/joyni yozing')

        bot.register_next_step_handler(send, fdbackPlace, lang)
    else:
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')    
def fdbackPlace(message, lang):
    global feed_back
    place_send = message.text
    if place_send != 'stop':
        if place_send == None: place_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        feed_back[str(message.chat.id)].update({"Place" : place_send})

        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Hodisa tarixini yozing')
        
        bot.register_next_step_handler(send, fdbackDate, lang)
    else:
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi') 
def fdbackDate(message, lang):
    global feed_back
    date_send = message.text
    if date_send != 'stop':
        if date_send == None: date_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        feed_back[str(message.chat.id)].update({"Date" : date_send})

        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–æ—à—ë–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Ismni yozing yoki ziddiyatga duch kelgan raqibni tariflang')
        
        bot.register_next_step_handler(send, fdBack_fill, lang)
    else:
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')
def fdBack_fill(message, lang):
    global feed_back
    global txt
    feedback_user = message.text
    if lang == 0:
        if feedback_user != 'üìû –¢–µ–ª–µ—Ñ–æ–Ω' and feedback_user != 'üíΩ –ë–î –ø–µ—Ä–µ–ø–∏—Å–æ–∫' and feedback_user !='üè† –ê–¥—Ä–µ—Å–∞' and feedback_user !='üåê –°–æ—Ü. —Å–µ—Ç–∏' and feedback_user !='üôã –û–ø–µ—Ä–∞—Ç–æ—Ä' and feedback_user != '‚òéÔ∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞' and feedback_user != '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—É' and feedback_user !='üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' and feedback_user !='‚ùóÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É' and feedback_user !='% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É' and feedback_user !='¬ÆFAQ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' and feedback_user != 'stop':
            if feedback_user == None: feedback_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
            feed_back[str(message.chat.id)].update({"FeedBack" : feedback_user})

            txt = "--------–ñ–ê–õ–û–ë–ê--------\n" + "id: " + str(message.chat.id) + "\n–ò–º—è: " + feed_back[str(message.chat.id)]["Name"] + "\n–Ø–∑—ã–∫: " + \
                account_settings[str(message.chat.id)].language + "\n–ü—Ä–∏—á–∏–Ω–∞: " + feed_back[str(message.chat.id)]["Reason"] + "\n–ú–µ—Å—Ç–æ: " + \
                feed_back[str(message.chat.id)]["Place"] + "\n–î–∞—Ç–∞: " + feed_back[str(message.chat.id)]["Date"] + "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç: " + feedback_user + "\n---------------------"

            bot.send_message(message.chat.id, '‚ûï –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Ä–≤–∏—Å–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ SwissLab. –ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏ –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\nüôã –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!')
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data='Q' + str(message.chat.id))
            markup.add(item1)
            
            for id_p in all_ids_arr:
                checkBlockedPeople(message, markup, id_p)

            oper_id = '0'
            database.insert_new_feedback_data(oper_id,  str(message.chat.id), txt, bot)
        else:
            if feedback_user != 'üìû telefon' and feedback_user != 'üíΩ Yozishmalar bazasi' and feedback_user !='üè† manzillari' and feedback_user !='üåê Biz ijtimoiy tarmoqlarda' and feedback_user !='üôã Operator' and feedback_user != "‚òéÔ∏è O'sha.  qo'llab-quvvatlash" and feedback_user != '‚úçÔ∏è Direktorga yozing' and feedback_user !='üìù buyurtma yaratish' and feedback_user !='‚ùóÔ∏è Shikoyat qoldiring' and feedback_user !='% Chegirma oling' and feedback_user !="¬ÆFAQ Ko'rsatma" and feedback_user != 'stop':
                if feedback_user == None: feedback_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
                feed_back[str(message.chat.id)].update({"FeedBack" : feedback_user})

                txt = "--------–ñ–ê–õ–û–ë–ê--------\n" + "id: " + str(message.chat.id) + "\n–ò–º—è: " + feed_back[str(message.chat.id)]["Name"] + "\n–Ø–∑—ã–∫: " + \
                    account_settings[str(message.chat.id)].language + "\n–ü—Ä–∏—á–∏–Ω–∞: " + feed_back[str(message.chat.id)]["Reason"] + "\n–ú–µ—Å—Ç–æ: " + \
                    feed_back[str(message.chat.id)]["Place"] + "\n–î–∞—Ç–∞: " + feed_back[str(message.chat.id)]["Date"] + "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç: " + feedback_user + "\n---------------------"

                bot.send_message(message.chat.id, '‚ûï Laboratoriya xizmatini nazorat qilish SwissLab. Biz tanlaganingiz uchun tashakkur va xizmatimiz sifatini yaxshilashga yordam bersangiz xursand bolamiz!\nüôã Agar kerak bolsa, bizning operatorimiz sizga murojaat qiladi!')
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data='Q' + str(message.chat.id))
                markup.add(item1)

                for id_p in all_ids_arr:
                    checkBlockedPeople(message, markup, id_p)

                oper_id = '0'
                database.insert_new_feedback_data(oper_id,  str(message.chat.id), txt, bot)
    
    elif feedback_user == 'stop':
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')
    else:
        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Iltimos, sharhingizni togri formatda kiriting yoki yozing stop')
        bot.register_next_step_handler(send, fdBack_fill, lang)


def enterTag(message):
    global account_settings
    global mess
    tags = message.text
    if mess == "new":
        account_settings[str(message.chat.id)].tags = []
        mess = ""
        
        openfileforRead('w+')
        openfileforRead('r')

    account_settings[str(message.chat.id)].tags.append(tags)
    
    openfileforRead('w+')
    openfileforRead('r')

    it = len(account_settings[str(message.chat.id)].tags)
    tet = "‚ûï –í–≤–µ–¥–µ–Ω–æ "
    tet += str(it)
    tet += " –∏–∑ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    send = bot.send_message(message.chat.id, tet)
    if (it < 10):
        bot.register_next_step_handler(send, enterTag)
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –±–æ—Ç–∞\n‚ùóÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /tags")
def enterTag_Sec(message):
    global account_settings
    global mess
    tags = message.text
    if mess == "new":
        account_settings[str(message.chat.id)].tags = []
        mess = ""

        openfileforRead('w+')
        openfileforRead('r')

    account_settings[str(message.chat.id)].tags.append(tags)
    
    openfileforRead('w+')
    openfileforRead('r')

    it = len(account_settings[str(message.chat.id)].tags)
    tet = "‚ûï Kirilgan "
    tet += str(it)
    tet += " 10 foydalanuvchilar"
    send = bot.send_message(message.chat.id, tet)
    if (it < 10):
        bot.register_next_step_handler(send, enterTag_Sec)
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è Foydalanuvchilar botni aktivlashtirgandan so'ng chegirmaga ega bo'lasiz agar do'stlaringiz ro'yxatini o'zgartirmoqchi bo'lsangiz bosing /tags")


def picPNGmaker(message):
    global account_settings
    img_text = message.chat.first_name
    img_text += ' '
    if message.chat.last_name != None:
        img_text += message.chat.last_name
    img = Image.open('lab.png')
    idraw = ImageDraw.Draw(img)
    hd = ImageFont.truetype('Arial.ttf', size = 45)
    idraw.text((150,280), img_text, fill = 'orange', font = hd)
    img.save('newAcc.png')
    with open('newAcc.png', 'rb') as f:
        contents = f.read()
    if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
        bot.send_photo(message.chat.id, contents, caption='üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞')
    else:
        bot.send_photo(message.chat.id, contents, caption='üí≥ Sizning kartangiz')
    os.remove('newAcc.png')


def refAdd(message):
    global account_settings
    ref_n = message.text
    openfileforRead('r')
    ch_ref = "none"
    for k in account_settings.keys():
        if k == ref_n:
            ch_ref = "yes"
            break
    if ch_ref == "yes":
        if int(account_settings[ref_n].ref) < 10:
            account_settings[ref_n].ref = str(int(account_settings[ref_n].ref) + 1)
            
            openfileforRead('w+')
            openfileforRead('r')
            
            if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é!")
                bot.send_message(ref_n, "‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!")
                keyboardRefMaker(message, 0)
            else:
                bot.send_message(message.chat.id, "‚úÖ Faollashtirish uchun rahmat!")
                bot.send_message(ref_n, "‚úÖ Yangi foydalanuvchi tavsiya kodini faollashtirdi!")
                keyboardRefMaker(message, 1)
        else:
            if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–µ–Ω—ã")
                keyboardRefMaker(message, 0)
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è Kodni faollashtirish tugadi")
                keyboardRefMaker(message, 1)
    elif ref_n == "stop":
        if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
            keyboardRefMaker(message, 0)
        else:
            keyboardRefMaker(message, 1)
    else:
        if account_settings[str(message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
            send = bot.send_message(message.chat.id, '‚ùî –í–∞—à –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - stop')
        else:
            send = bot.send_message(message.chat.id, '‚ùî Sizning kodingiz topilmadi, yana porobuyte yoki yozing - stop')
        bot.register_next_step_handler(send, refAdd)


def userSebdText(message):
    global account_settings
    if message.text != 'stop':
        if account_settings[account_settings[str(message.chat.id)].feedback_st].language == '–†—É—Å—Å–∫–∏–π':
            oper_ans = '–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ #' + account_settings[str(message.chat.id)].feedback_st + ' –Ω–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É!üëá'
            bot.send_message(account_settings[str(message.chat.id)]["feedback_st"], oper_ans)
        else:  
            oper_ans = 'Sizning shikoyatingizga javob beruvchi operator #' + account_settings[str(message.chat.id)].feedback_st + ' !üëá'
            bot.send_message(account_settings[str(message.chat.id)].feedback_st, oper_ans)
        if message.photo != None:
            fileID = message.photo[-1].file_id
            file_info = bot.get_file(fileID)
            word_user_send = bot.download_file(file_info.file_path)
            bot.send_photo(account_settings[str(message.chat.id)].feedback_st, word_user_send)
        if message.text != None or message.caption != None:
            if message.text != None: word_user_send = message.text
            else: word_user_send = message.caption
            bot.send_message(account_settings[str(message.chat.id)].feedback_st, word_user_send)
            database.insert_new_feedback_data(str(message.chat.id), account_settings[str(message.chat.id)].feedback_st, word_user_send, bot)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        account_settings[account_settings[str(message.chat.id)].feedback_st].feedback_st = 'close'
        account_settings[str(message.chat.id)].feedback_st = 'close'
        
        openfileforRead('w+')
        openfileforRead('r')

    else: bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!')



def inlineMessages(call, text1, text2, callback_data1, callback_data2, markup_text):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton(text=text1, callback_data=callback_data1)
    item2 = types.InlineKeyboardButton(text=text2, callback_data=callback_data2)
    markup.add(item1, item2)
    bot.send_message(call.message.chat.id, markup_text.format(call.message.chat, bot.get_me()), parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global new_acc_id
    global account_settings
    global mess
    try:
        if call.data == '–†—É—Å—Å–∫–∏–π':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            account_settings[new_acc_id].language = "–†—É—Å—Å–∫–∏–π"
            new_acc_id = ""
            
            openfileforRead('w+')
            openfileforRead('r')

            start_txt = openfileforRead(None, path_first_lang)

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data='–°–æ–≥–ª–∞—Å–µ–Ω')
            item2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data='–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å')
            markup.add(item1, item2)
            bot.send_message(call.message.chat.id, start_txt.format(call.message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
        elif call.data == '–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n‚ôªÔ∏è –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        elif call.data == '–°–æ–≥–ª–∞—Å–µ–Ω':
            inlineMessages(call, text1='–î–∞', text2='–ù–µ—Ç', callback_data1='–î–∞', callback_data2='–ù–µ—Ç' , markup_text='‚ôªÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞?')

        elif call.data == '–ù–µ—Ç':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            keyboardRefMaker(call.message, 0)
        elif call.data == '–î–∞':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥')
            bot.register_next_step_handler(send, refAdd)

        elif call.data == 'Ozbek':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            account_settings[new_acc_id].language = "Ozbek"
            new_acc_id = ""
            
            openfileforRead('w+')
            openfileforRead('r')

            start_txt = openfileforRead(None, path_second_lang)

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("ROZIMAN", callback_data='Agree')
            item2 = types.InlineKeyboardButton("Qo'shilmayman", callback_data='Disagree')
            markup.add(item1, item2)
            bot.send_message(call.message.chat.id, start_txt.format(call.message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
        elif call.data == 'Disagree':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "Siz shaxsiy ma'lumotlarni qayta ishlash uchun rad qilgan\n‚ôªÔ∏è Botni qayta ishga tushirish uchun bosing /start")
        elif call.data == 'Agree':
            inlineMessages(call, text1='Ha', text2="Yo'q", callback_data1='Yes', callback_data2='No' , markup_text="‚ôªÔ∏è Yo'naltiruvchi havola bormi?")
        elif call.data == 'No':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            keyboardRefMaker(call.message, 1)
        elif call.data == 'Yes':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï Kodni yuboring')
            bot.register_next_step_handler(send, refAdd)

        elif call.data == '–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
            bot.register_next_step_handler(send, fdbackName, 0)
        elif call.data == 'Write a feedback':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï Telefon raqamingizni kiriting')
            bot.register_next_step_handler(send, fdbackName, 1)

        elif call.data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å tag –¥—Ä—É–∑–µ–π':
            mess = "new"
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–µ–Ω–æ 0 –∏–∑ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            bot.register_next_step_handler(send, enterTag)
        elif call.data == 'Send friends @tags':
            mess = "new"
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï 10 ta foydalanuvchidan 0 ga kirgan')
            bot.register_next_step_handler(send, enterTag_Sec)

        elif call.data == '–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangStart', callback_data2='OzbekLangStart' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangStart':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_first_lang)
        elif call.data == 'OzbekLangStart':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_second_lang)

        elif call.data == 'FAQ —Ç–µ–∫—Å—Ç':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangFAQ', callback_data2='OzbekLangFAQ' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_FAQ_label)
        elif call.data == 'OzbekLangFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_FAQ_label)

        elif call.data == '–¢–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangOper', callback_data2='OzbekLangOper' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangOper':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_oper_label)
        elif call.data == 'OzbekLangOper':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_oper_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangTele', callback_data2='OzbekLangTele' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangTele':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_telephone_num)
        elif call.data == 'OzbekLangTele':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_telephone_num)

        elif call.data == '–¢–µ–∫—Å—Ç –∞–¥—Ä–µ—Å—Å–∞':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangAdress', callback_data2='OzbekLangAdress' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangAdress':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_address_label)
        elif call.data == 'OzbekLangAdress':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_address_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangOrder', callback_data2='OzbekLangOrder' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangOrder':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_order_label)
        elif call.data == 'OzbekLangOrder':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_order_label)

        elif call.data == '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangRecv', callback_data2='OzbekLangRecv' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangRecv':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_recv_label)
        elif call.data == 'OzbekLangRecv':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_recv_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangDisc', callback_data2='OzbekLangDisc' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangDisc':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_discount_label)
        elif call.data == 'OzbekLangDisc':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_discount_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangSocial', callback_data2='OzbekLangSocial' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangSocial':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_social_web)
        elif call.data == 'OzbekLangSocial':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_social_web)

        elif call.data == '–¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞':
            inlineMessages(call, text1='–†—É—Å—Å–∫–∏–π', text2='Ozbek', callback_data1='–†—É—Å—Å–∫–∏–πLangOperFAQ', callback_data2='OzbekLangOperFAQ' , markup_text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞')
        elif call.data == '–†—É—Å—Å–∫–∏–πLangOperFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path_FAQoper_label)
        elif call.data == 'OzbekLangOperFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path_sec_FAQoper_label)

        elif call.data == 'üëç':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if account_settings[str(call.message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                bot.send_message(call.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')
            else: bot.send_message(call.message.chat.id, 'Baholash uchun rahmat!')
        elif call.data == 'üëé':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if account_settings[str(call.message.chat.id)].language == "–†—É—Å—Å–∫–∏–π":
                bot.send_message(call.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')
            else: bot.send_message(call.message.chat.id, 'Baholash uchun rahmat!')

        elif call.data[0] == 'Q':
            if account_settings[call.data[1:]].feedback_st == 'open':
                account_settings[call.data[1:]].feedback_st = 'close'
                account_settings[str(call.message.chat.id)].feedback_st = call.data[1:]
                
                openfileforRead('w+')
                openfileforRead('r')

                send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                bot.register_next_step_handler(send, userSebdText)
            else:
                bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ stop")
                account_settings[call.data[1:]].feedback_st = 'close'
                account_settings[str(call.message.chat.id)].feedback_st = call.data[1:]
                
                openfileforRead('w+')
                openfileforRead('r')

                send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                bot.register_next_step_handler(send, userSebdText)
        else:
            if account_settings[str(call.message.chat.id)].conversation == 'close':
                for k in account_settings.keys():
                    if k == call.data and account_settings[k].conversation == 'mid':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        item1 = types.KeyboardButton("üîô –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                        item2 = types.KeyboardButton("‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
                        item3 = types.KeyboardButton("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞")
                        item4 = types.KeyboardButton("üôã –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è")
                        item5 = types.KeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
                        item6 = types.KeyboardButton("‚úçÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä")
                        item7 = types.KeyboardButton("üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä")
                        markup.row(item1, item2).row(item3, item4, item5).row(item6, item7)
                        account_settings[str(call.message.chat.id)].tags.append(str(k))
                        account_settings[str(call.message.chat.id)].conversation = 'open'
                        account_settings[k].tags.append(str(call.message.chat.id))
                        account_settings[k].tags.append("0")
                        account_settings[k].conversation = 'open'
                        
                        account_settings[k].timer_conv = int(time.time())

                        openfileforRead('w+')
                        openfileforRead('r')

                        if account_settings[k].language == "–†—É—Å—Å–∫–∏–π":
                            oper_ans = "üìû –ù–∞–π–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä #" + str(call.message.chat.id) + " , –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                            bot.send_message(k, oper_ans)
                        else:
                            oper_ans = "üìû Operator #" + str(call.message.chat.id) + " topildi, yozishmalar faollashtirildi"
                            bot.send_message(k, oper_ans)
                        bot.send_message(str(call.message.chat.id), "üìû –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É!", reply_markup=markup)
                        user_id = str(k)
                        oper_id = str(call.message.chat.id)
                        database.insert_new_data(user_id, oper_id, bot)
                        break
                if account_settings[str(call.message.chat.id)].conversation != 'open':
                    if account_settings[str(call.data)].conversation != 'open':
                        u_tex = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id: "
                        u_tex += str(call.data)
                        u_tex += " –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–∂–∏–º!\n–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤..."
                        bot.send_message(call.message.chat.id, u_tex)
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        item1 = types.KeyboardButton("üîô –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                        item2 = types.KeyboardButton("‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
                        item3 = types.KeyboardButton("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞")
                        item4 = types.KeyboardButton("üôã –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è")
                        item5 = types.KeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
                        item6 = types.KeyboardButton("‚úçÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä")
                        item7 = types.KeyboardButton("üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä")
                        markup.row(item1, item2).row(item3, item4, item5).row(item6, item7)
                        if account_settings[str(call.data)].language != "–†—É—Å—Å–∫–∏–π":
                            item1 = types.KeyboardButton("üîô Operator chaqiruvini rad etish")
                            item2 = types.KeyboardButton("‚ùî Ko'rsatma")
                        user_markup.add(item1, item2)
                        account_settings[str(call.message.chat.id)].tags.append(str(call.data))
                        account_settings[str(call.message.chat.id)].conversation = 'open'
                        account_settings[str(call.data)].tags.append(str(call.message.chat.id))
                        account_settings[str(call.data)].tags.append("0")
                        account_settings[str(call.data)].conversation = 'open'
                        account_settings[str(call.data)].timer_conv = int(time.time())
                        
                        openfileforRead('w+')
                        openfileforRead('r')

                        try:
                            if account_settings[str(call.data)].language == "–†—É—Å—Å–∫–∏–π":
                                oper_ans = "üìû –û–ø–µ—Ä–∞—Ç–æ—Ä #" + str(call.message.chat.id) + " –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É"
                                bot.send_message(str(call.data), oper_ans, reply_markup=user_markup)
                            else:
                                oper_ans = "üìû Operator #" + str(call.message.chat.id) + " yozishmalarni faollashtirdi"
                                bot.send_message(str(call.data), oper_ans, reply_markup=user_markup)
                            bot.send_message(str(call.message.chat.id), "üìû –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É!", reply_markup=markup)
                            user_id = str(call.data)
                            oper_id = str(call.message.chat.id)
                            database.insert_new_data(user_id, oper_id, bot)
                        except Exception as e:
                            account_settings[str(call.message.chat.id)].conversation = 'close'
                            account_settings[str(call.data)].tags = []
                            account_settings[str(call.message.chat.id)].tags = []
                            bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–∏–ª –±–æ—Ç–∞!')
                            
                            openfileforRead('w+')
                            openfileforRead('r')
                    else:
                        bot.send_message(str(call.message.chat.id), "–î—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É!")
            else:
                bot.send_message(call.message.chat.id, "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π!")


    except Exception as e:
        print("Error in the 'call' part!", repr(e))
        for id_er in label_change_ids_arr:
            bot.send_message(int(id_er), "Error in the 'call' part!\n\n"+ traceback.format_exc())

if __name__ == '__main__':
    start_process()
    try:
        bot.polling(none_stop=True)
    except Exception as _:
        for id_er in label_change_ids_arr:
            bot.send_message(int(id_er), "Program error!\n\n"+ traceback.format_exc())
