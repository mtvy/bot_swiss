# Main libraries
from pickle import FALSE
import schedule, datetime, psycopg2, telebot, time, json, io, os, traceback
from PIL import Image, ImageDraw, ImageFont
from multiprocessing import Array, Process
from telebot import types

# Project files
import config, database, classes, path, variables

account_settings = database.get_accounts_data()

def openfileforRead(action=None, name_path=None, file_text='') -> str:
    return file_text.join([i for i in io.open(name_path, encoding='utf-8')])

def langCheck(message = None, person_id = None) -> bool:
    """
    This def returns True if the language is Russian.
    """
    global account_settings
    return True if account_settings[str(message.chat.id) if person_id == None else str(person_id)].language == "–†—É—Å—Å–∫–∏–π" else False

def saveNewText(message, name_path) -> None:
    open(name_path, 'w', encoding='utf-8').write(message.text)
    bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def checkOperId(person_id, action) -> bool:
    """
    Use this method to check the role of a person.
    Parameters below described in variables.py
    
    all_ids_arr
    label_change_ids_arr        simple_oper_ids_arr
    doctor_oper_ids_arr         support_oper_ids_arr
    director_oper_ids_arr       feedback_oper_ids_arr
    collection_oper_ids_arr     collection_cash_ids_arr
    """
    return True if person_id in [pers_id for pers_id in action] else False


bot = telebot.TeleBot(config.TOKEN)


def start_process():
    Process(target = P_schedule.start_schedule, args = ()).start()
class P_schedule:
    """
    This class repost messages from the telegram channel.
    """

    def start_schedule():
        schedule.every(30).seconds.do(P_schedule.send_post)
        while True:
            schedule.run_pending()
            time.sleep(1)

    def send_post():
        c_ex = 0
        account_settings = database.get_accounts_data()
        for account in account_settings.keys():
            try:
                bot.forward_message(int(account), variables.CHANNEL_ID, variables.MESSAGE_ID)
                time.sleep(1)
            except Exception as _:
                c_ex+=1
                continue
            try:
                if (int(time.time()) - account_settings[account].timer_conv) > 900 and account_settings[account].conversation == 'open':
                    stopConversation(message = None, lang = 0 if langCheck(message = None, person_id = account) else 1, pers_id = account)
            except Exception as _:
                pass
        if c_ex == len(account_settings):
            c_ex = 0
        else:
            try:
                bot.forward_message(281321076, variables.CHANNEL_ID, variables.MESSAGE_ID)
                variables.MESSAGE_ID += 1
            except Exception as qt:
                print(f"Error pushing news!\n\n{repr(qt)}")
                for id_er in variables.label_change_ids_arr:
                    bot.send_message(int(id_er), f"Error pushing news!\n\n{repr(qt)}")


@bot.message_handler(commands=['start'])
def welcome(message):
    global account_settings
    
    account_settings = database.get_accounts_data()

    new_account = [str(message.chat.id)]
    for account in account_settings.keys():
        if account_settings[account].telegram_id == new_account[0]:
            if account_settings[account].language == "–†—É—Å—Å–∫–∏–π":
                if account_settings[account].personal_data == "YES":
                    bot.send_message(message.chat.id,"üî±–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
                    keyboardRefMaker(message = message, lang = 0)
                elif account_settings[account].personal_data == "NO":
                    inlineMessages(markup_text = openfileforRead(None, path.first_lang), message = message, markup_arr = [["–°–æ–≥–ª–∞—Å–µ–Ω", "–°–æ–≥–ª–∞—Å–µ–Ω"], ["–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", "–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å"]], action = False)
            elif account_settings[account].language == "Ozbek":
                if account_settings[account].personal_data == "YES":
                    bot.send_message(message.chat.id,"üî±Siz allaqachon ro'yxatdan o'tgansiz!")
                    keyboardRefMaker(message = message, lang = 1)
                elif account_settings[account].personal_data == "NO":
                    inlineMessages(markup_text = openfileforRead(None, path.second_lang), message = message, markup_arr = [["ROZIMAN", "Agree"], ["Qo'shilmayman", "Disagree"]], action = False)
            else:
                inlineMessages(markup_text = "üî±Choose language", message = message, markup_arr = [["–†—É—Å—Å–∫–∏–π", "–†—É—Å—Å–∫–∏–π"], ["Ozbek", "Ozbek"]], action = False)
            break
    else:
        new_account += [str(message.chat.username), str(message.chat.first_name), [], "close", "0", [], "0", "NO", None, 'close', 0]
        account = classes.Account(new_account)
        database.insert_account_data(account)
        account_settings[account.telegram_id] = account
        inlineMessages(markup_text = "üî±Choose language", message = message, markup_arr = [["–†—É—Å—Å–∫–∏–π", "–†—É—Å—Å–∫–∏–π"], ["Ozbek", "Ozbek"]], action = False)

@bot.message_handler(commands=['changeLabel'])
def adderNewLabel(message):
    if checkOperId(person_id = str(message.chat.id), action = variables.label_change_ids_arr):
        inlineMessages(markup_text = "–ö–∞–∫–æ–π –±–ª–æ–∫ –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", message = message, markup_arr = variables.markup_change_label_arr, action = False)


def sendReqtoOper(message, which_oper, oper_send_text, markup):
    for oper_id in variables.action_oper_select[which_oper]:
        bot.send_message(int(oper_id), oper_send_text, reply_markup=markup)

def operKeyboardMaker(message, which_oper, lang):
    global account_settings
    global message_ids_dict
    account_settings[str(message.chat.id)].conversation = 'mid'
    variables.message_ids_dict[str(message.chat.id)] = message
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if lang == 0:
        item1 = types.KeyboardButton("üîô –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        item2 = types.KeyboardButton("‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "üôã –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=markup)
    elif lang == 1:
        item1 = types.KeyboardButton("üîô Operator chaqiruvini rad etish")
        item2 = types.KeyboardButton("‚ùî Ko'rsatma")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "üôã Operator bilan yozishmalar rejimi yoqilgan", reply_markup=markup)
    oper_send_text = f'-------–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–ø–∏—Å–∫–∏!-------\nid: {message.chat.id} \n–ò–º—è: {message.chat.first_name} \n–§–∞–º–∏–ª–∏—è: {message.chat.last_name} \nUsername: @ {message.chat.username} \n–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n----------------------------'
    oper_send_text = "-------–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–ø–∏—Å–∫–∏!-------\nid: "
    oper_send_text += str(message.chat.id)
    oper_send_text += "\n–ò–º—è: "
    oper_send_text += str(message.chat.first_name)
    oper_send_text += "\n–§–∞–º–∏–ª–∏—è: "
    oper_send_text += str(message.chat.last_name)
    oper_send_text += "\nUsername: @"
    oper_send_text += str(message.chat.username)
    oper_send_text += "\n–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n----------------------------"
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=str(message.chat.id))
    markup.add(item1)
    user_id = str(message.chat.id)
    oper_id = '0'
    database.insert_new_data(user_id, oper_id, bot)
    sendReqtoOper(message, which_oper, oper_send_text, markup)
		

def dbDateSortEnter(message, action):
    send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨ (2000-1-12)')
    bot.register_next_step_handler(send, dbSortEnter, action)
def dbSortEnter(message, action):
    date_text = database.getDataFromDB(date_start = message.text, action = action)
    if date_text == 0:
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ!')
        return
    else: bot.send_message(message.chat.id, date_text)
    bot.register_next_step_handler(bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω—É–∂–Ω–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ id'), dbIdSortEnter, action)
def dbIdSortEnter(message, action):
    id_text = database.getTextFromDB(id_text = message.text, action = action)
    bot.send_message(message.chat.id, id_text if id_text != 0 else '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ!')
    return

def pushingLabelFromFile(message, path, path_sec):
    bot.send_message(message.chat.id, openfileforRead(None, path if langCheck(message) else path_sec).format(message.chat, bot.get_me()),parse_mode='html')

def operInit(message, action, set_act, id_check, deactivation=None):
    if checkOperId(person_id = str(message.chat.id), action = action): bot.send_message(message.chat.id, "–í—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä!")
    else: operKeyboardMaker(message = message, which_oper = set_act, lang = 0 if langCheck(message) else 1)
        
def redirectInit(message, action):
    global account_settings

    bot.send_message(str(message.chat.id), action)
    if len(account_settings[str(message.chat.id)].tags) != 0:

        bot.send_message(str(account_settings[str(message.chat.id)].tags[0]), action)
        
        database.change_account_data(account = account_settings[account_settings[str(message.chat.id)].tags[0]], parametr = 'conversation', data = 'close')
        database.change_account_data(account = account_settings[account_settings[str(message.chat.id)].tags[0]], parametr = 'tags', data = [])        
        account_settings = database.get_accounts_data()

        keyboardRefMaker(message, 0 if langCheck(message) else 1, account_settings[str(message.chat.id)].tags[0])

    keyboardRefMaker(message, 0)
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üëç", callback_data='üëç'), types.InlineKeyboardButton("üëé", callback_data='üëé'))
    bot.send_message(account_settings[str(message.chat.id)].tags[0] if checkOperId(person_id = str(message.chat.id), action = variables.all_ids_arr) else str(message.chat.id), '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!' if langCheck(message) else 'Operator ishini baholang!', reply_markup=markup)
        
def stopConversation(message, lang, pers_id=None, action = None):
    global account_settings
    person_id = pers_id if pers_id != None else str(message.chat.id)
    push_text = "‚ùó –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞" if lang == 0 or lang == '–†—É—Å—Å–∫–∏–π' else "‚ùó Muloqotni yakunlash"
    bot.send_message(person_id, push_text)
    if len(account_settings[person_id].tags) != 0:
        bot.send_message(str(account_settings[person_id].tags[0]), push_text)
            
        database.change_account_data(account = account_settings[account_settings[person_id].tags[0]], parametr = 'conversation', data = 'close')
        database.change_account_data(account = account_settings[account_settings[person_id].tags[0]], parametr = 'tags', data = [])        
        account_settings = database.get_accounts_data()

        keyboardRefMaker(None, 0 if account_settings[account_settings[person_id].tags[0]].language == "–†—É—Å—Å–∫–∏–π" else 1, account_settings[person_id].tags[0])
    keyboardRefMaker(None, lang, person_id)

    user_id = account_settings[person_id].tags[0] if checkOperId(person_id = person_id, action = variables.all_ids_arr) and action == None else person_id
    if not checkOperId(person_id = person_id, action = variables.all_ids_arr):
        inlineMessages(markup_text = '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!' if langCheck(person_id = user_id) else 'Operator ishini baholang!', person_id = user_id, markup_arr = [['üëç', 'üëç'], ['üëé', 'üëé']], action = False)
            
    database.change_account_data(account = account_settings[person_id], parametr = 'conversation', data = 'close')
    database.change_account_data(account = account_settings[person_id], parametr = 'tags', data = [])        
    account_settings = database.get_accounts_data()
            
    database.closerDataBase(person_id, bot)

def closeConversation(message):
    global account_settings
            
    database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'conversation', data = 'close')
    database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'tags', data = [])        
    account_settings = database.get_accounts_data()
            
    database.closerDataBase(str(message.chat.id), bot)

def setCollectionKeyboard(message, person_id, show_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–µ–¥ –æ—Ñ–∏—Å'):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ú–û –ì–æ—Ä.–±–æ–ª—å–Ω–∏—Ü–∞ ‚Ññ1")
    item2 = types.KeyboardButton("–ú–û –ö—É—à–±–µ–≥–∏")
    item3 = types.KeyboardButton("–ú–û  –ú–∏—Ä–∑–æ –£–ª—É–≥–±–µ–∫–∞")
    item4 = types.KeyboardButton("–ú–û  –Æ–Ω—É—Å–∞—Ç–∞")
    item5 = types.KeyboardButton("–ú–û  viezd")
    item6 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(person_id, show_text, reply_markup=markup)

def selectOffice(message, person_id, step, push_text = ''):
    if checkOperId(person_id = person_id, action = variables.collection_oper_ids_arr):
        if variables.show_text_dict[step]:
            database.dbCollection(message = message, person_id = person_id, step = step - 1, database_push_data = message.text)
            bot.send_message(person_id, variables.show_text_dict[step])
            bot.register_next_step_handler(message, selectOffice, person_id, step + 1)
        else:
            database.dbCollection(message = message, person_id = person_id, step = step - 1, database_push_data = message.text)
            data = ''.join([f"{str(row)}\n" for row in database.dbCollection(message = message, person_id = person_id, step = step, database_push_data = 'admin')])
            bot.send_message(person_id, data)
            inlineMessages(markup_text = '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', message = message, markup_arr = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç'], ['–ò–∑–º–µ–Ω–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']])

    elif checkOperId(person_id = person_id, action = variables.collection_cash_ids_arr):
        database.dbCollection(message = message, person_id = person_id, database_push_data = message.text, action = 'cashier_init')
        data =  database.dbCollection(message = message, person_id = person_id, database_push_data = message.text, step = 9, action = 'show_collection_to_cashier')
        data = ''.join([f"{str(row)}\n" for row in data[0]]) if len(data) > 0 else '–î–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –æ—Ñ–∏—Å—É –Ω–µ—Ç!'
        bot.send_message(person_id, data)
        if data != '–î–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –æ—Ñ–∏—Å—É –Ω–µ—Ç!': inlineMessages(markup_text = '–ú–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', message = message, markup_arr = [['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], ['–ò–∑–º–µ–Ω–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']])



@bot.message_handler(content_types=['text', 'photo'])
def lol(message):
    global account_settings
    global mess

    account_settings = database.get_accounts_data()
    
    #–û–ø–∏—Å–∞—Ç—å –ñ–∞–ª–æ–±—É –¥–ª—è –£–∑–±–µ–∫—Å–∫–æ–≥–æ
    
    if message.chat.type == 'private':
        if message.text in variables.message_text_dict.keys():
            if variables.message_text_dict[message.text][0] == 'office':
                selectOffice(message = message, person_id = str(message.chat.id), step = 1)
            elif variables.message_text_dict[message.text][0] == 'text_show':
                pushingLabelFromFile(message, variables.message_text_dict[message.text][1], variables.message_text_dict[message.text][2])
            elif variables.message_text_dict[message.text][0] == 'oper_show':
                operInit(message, variables.message_text_dict[message.text][1], variables.message_text_dict[message.text][2], str(message.chat.id))
            elif variables.message_text_dict[message.text][0] == 'oper_close':
                stopConversation(message, variables.message_text_dict[message.text][1])
            elif variables.message_text_dict[message.text][0] == 'redirect':
                redirectInit(message, f"‚ùó –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {variables.message_text_dict[message.text][1]}")
                operInit(variables.message_ids_dict[account_settings[str(message.chat.id)].tags[0]], variables.message_text_dict[message.text][2], variables.message_text_dict[message.text][3], closeConversation(message))
            elif variables.message_text_dict[message.text][0] == 'discount':
                bot.send_message(message.chat.id, openfileforRead(None, variables.message_text_dict[message.text][1]).format(message.chat, bot.get_me()),parse_mode='html')
        elif message.text == 'üîô –ù–∞–∑–∞–¥':
            stopConversation(message, account_settings[str(message.chat.id)].language, action = 'back')
        elif message.text == '‚ùóÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É' or message.text == '‚ùóÔ∏è Shikoyat qoldiring':
            if checkOperId(person_id = str(message.chat.id), action = variables.feedback_oper_ids_arr):
                dbDateSortEnter(message = message, action = 'feedback_tb')
            else:
                account_settings[str(message.chat.id)].feedback_st = 'open'
                markup = types.InlineKeyboardMarkup(row_width=2)
                button_text = "–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É" if langCheck(message) else "Shikoyat yozing"
                markup.add(types.InlineKeyboardButton(button_text, callback_data = button_text))
                bot.send_message(message.chat.id, openfileforRead(None, path.recv_label if langCheck(message) else path.sec_recv_label).format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
        elif message.text == "üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è":
            setCollectionKeyboard(message = message, person_id = str(message.chat.id))
        elif message.text == 'üíΩ –ë–î –ø–µ—Ä–µ–ø–∏—Å–æ–∫' or message.text == 'üíΩ Yozishmalar bazasi':
            if checkOperId(person_id = str(message.chat.id), action = variables.all_ids_arr):
                dbDateSortEnter(message = message, action = 'message_tb')
            else:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –±–∞–∑—ã!' if langCheck(message) else "Sizda bazani o'qish huquqi yo'q!")
        elif message.text == '% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É' or message.text == '% Chegirma oling':
            oper_write = ''
            mess = 'new'
            if (account_settings[str(message.chat.id)].discount == "0" and account_settings[str(message.chat.id)].ref == "0"):
                oper_write = openfileforRead(None, path.discount_label if langCheck(message) else path.sec_discount_label) + ("\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: " if langCheck(message) else  f"\nSizning tavsiyangiz kodi: ") + str(message.chat.id)
                bot.send_message(message.chat.id, oper_write.format(message.chat, bot.get_me()),parse_mode='html')
            elif account_settings[str(message.chat.id)].ref == "10":
                database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'discount', data = '10')       
                account_settings = database.get_accounts_data()
                picPNGmaker(message)
                bot.send_message(message.chat.id, "‚úÖ –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!" if langCheck(message) else "‚úÖ Siz maksimal chegirma bor!")
            else:
                if account_settings[str(message.chat.id)].discount == "10":
                    picPNGmaker(message)
                    bot.send_message(message.chat.id, "‚úÖ –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!" if langCheck(message) else "‚úÖ Siz maksimal chegirma bor!")
                else:
                    ru_text = f"‚ùå –í–∞—à–∏ –¥—Ä—É–∑—å—è –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞!\n‚ùå –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π {account_settings[str(message.chat.id)].ref} –∏–∑ 10"
                    uz_text = f"‚ùå Sizning do'stlaringiz hali botni faollashtirmagan!\n‚ùå Jami aktivatsiyalar {account_settings[str(message.chat.id)].ref} dan 10"    
                    bot.send_message(message.chat.id, ru_text if langCheck(message) else uz_text)
                    picPNGmaker(message)
        elif message.text == "‚ùóÔ∏è –ñ–∞–ª–æ–±–∞":
            redirectInit(message, "‚ùó –û–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª –∂–∞–ª–æ–±")
            account_settings[account_settings[str(message.chat.id)].tags[0]].feedback_st = 'open'
            markup = types.InlineKeyboardMarkup(row_width=2) 
            markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É" if langCheck(message) else "Shikoyat yozing", callback_data="–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É" if langCheck(message) else "Shikoyat yozing"))
            account_settings[account_settings[str(message.chat.id)].tags[0]].feedback_st = 'open'
            bot.send_message(account_settings[str(message.chat.id)].tags[0], openfileforRead(None, path.recv_label if langCheck(message) else path.sec_recv_label).format(message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
            closeConversation(message)        
        else:
            if account_settings[str(message.chat.id)].conversation == 'open':
                if checkOperId(person_id = str(message.chat.id), action = variables.all_ids_arr):
                    database.change_account_data(account = account_settings[account_settings[str(message.chat.id)].tags[0]], parametr = 'timer_conv', data = int(time.time()))
                    sm_id = 'Operator: '
                else:
                    database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'timer_conv', data = int(time.time()))
                    sm_id = 'User: '
      
                account_settings = database.get_accounts_data()

                if message.text != None:
                    sm_id = sm_id + message.text + '\n'
                    bot.send_message(account_settings[str(message.chat.id)].tags[0], message.text)
                elif message.caption != None:
                    sm_id = sm_id + message.caption + '\n'
                    bot.send_message(account_settings[str(message.chat.id)].tags[0], message.caption)
                if message.photo != None:
                    sm_id = sm_id + 'PHOTO\n'
                    fileID = message.photo[-1].file_id
                    file_info = bot.get_file(fileID)
                    downloaded_file = bot.download_file(file_info.file_path)
                    bot.send_photo(account_settings[str(message.chat.id)].tags[0], downloaded_file)
                database.insert_text_to_data(sm_id, str(message.chat.id), bot)



def markupMaker(action, button_text) -> types.ReplyKeyboardMarkup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    pin = [types.KeyboardButton(tag) for tag in button_text.keys() if action in button_text[tag]]
    markup.add(*pin) if action != 'user' else markup.row(pin[0], pin[1], pin[3]).row(pin[5], pin[6], pin[8]).row(pin[10]).row(pin[2], pin[7]).row(pin[4], pin[9])
    return markup

def keyboardRefMaker(message, lang, pers_id=None):
    global account_settings
    person_id = pers_id if pers_id != None else str(message.chat.id)
    markup = markupMaker(action = 'admin' if checkOperId(person_id = person_id, action = variables.collection_cash_ids_arr + variables.collection_oper_ids_arr) else 'oper' if  checkOperId(person_id = person_id, action = variables.all_ids_arr) else 'user', button_text = variables.buttons_ru_text if lang == 0 or lang == '–†—É—Å—Å–∫–∏–π' else variables.buttons_uz_text)
    bot.send_message(person_id, openfileforRead(None, path.FAQ_label if lang == 0 or lang == '–†—É—Å—Å–∫–∏–π' else path.sec_FAQ_label) if not checkOperId(person_id = person_id, action = variables.all_ids_arr) else '–û—Ç–∫—Ä—ã—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!', parse_mode='html', reply_markup=markup)
    if person_id != pers_id:        
        account_settings = database.get_accounts_data()
        database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'personal_data', data = 'YES')
        account_settings = database.get_accounts_data()


def checkBlockedPeople(message, markup, pers_id):
    try:
        bot.send_message(pers_id, txt, reply_markup=markup)
    except Exception as error:
        text_push = f"User {pers_id} blocked!\n\n{repr(error)}"
        print(text_push)
        for id_er in variables.label_change_ids_arr:
            bot.send_message(int(id_er), text_push)


def fdbackName(message, lang):
    global account_settings
    name_user = message.text
    if name_user != 'stop':
        if name_user == None: name_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        variables.feed_back[str(message.chat.id)] = {"Name" : name_user, "Username" : str(message.chat.username), "Language" : account_settings[str(message.chat.id)].language}
        send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' if lang == 0 else '‚ûï Telefon raqamingizni kiriting')
        bot.register_next_step_handler(send, fdbackTele, lang)
    else:
        bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
def fdbackTele(message, lang):
    tele_num = message.text
    if tele_num.isdigit() == True:
        if tele_num == None: tele_num = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        variables.feed_back[str(message.chat.id)].update({"Telephone number" : tele_num})
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –ñ–∞–ª–æ–±–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–µ—Ç—ã—Ä–µ —ç—Ç–∞–ø–∞:\n1) –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã\n2) –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞/–º–µ—Å—Ç–∞, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç\n3) –î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞\n4) –ò–º—è –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–æ—à—ë–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop')
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã')
        else:
            bot.send_message(message.chat.id, '‚ûï Shikoyat tort bosqichda tuziladi:\n1) Shikoyat sababi\n2) Hodisa sodir bolgan filial/joyni belgilash\n3) Hodisa sanasi\n4) Mojaro yuz bergan raqibning nomi yoki tarifi\n‚ùå Operatsiyani bekor qilish uchun yozing stop')
            send = bot.send_message(message.chat.id, '‚ûï Shikoyat sababini yozing')
        bot.register_next_step_handler(send, fdbackReason, lang)
    elif tele_num == 'stop':
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')
    else:
        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 998999999999 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Telefon raqamingizni formatda kiriting 9997777777777 yoki yozing stop')
        bot.register_next_step_handler(send, fdbackTele, lang)
def fdbackReason(message, lang):
    reason_send = message.text
    if reason_send != 'stop':
        if reason_send == None: reason_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        variables.feed_back[str(message.chat.id)].update({"Reason" : reason_send})
        
        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª/–º–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Hodisa sodir bolgan filial/joyni yozing')

        bot.register_next_step_handler(send, fdbackPlace, lang)
    else:
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')    
def fdbackPlace(message, lang):
    place_send = message.text
    if place_send != 'stop':
        if place_send == None: place_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        variables.feed_back[str(message.chat.id)].update({"Place" : place_send})

        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Hodisa tarixini yozing')
        
        bot.register_next_step_handler(send, fdbackDate, lang)
    else:
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi') 
def fdbackDate(message, lang):
    date_send = message.text
    if date_send != 'stop':
        if date_send == None: date_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        variables.feed_back[str(message.chat.id)].update({"Date" : date_send})

        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–æ—à—ë–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Ismni yozing yoki ziddiyatga duch kelgan raqibni tariflang')
        
        bot.register_next_step_handler(send, fdBack_fill, lang)
    else:
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')
def fdBack_fill(message, lang):
    global txt
    feedback_user = message.text
    if lang == 0:
        if feedback_user != 'üìû –¢–µ–ª–µ—Ñ–æ–Ω' and feedback_user != 'üíΩ –ë–î –ø–µ—Ä–µ–ø–∏—Å–æ–∫' and feedback_user !='üè† –ê–¥—Ä–µ—Å–∞' and feedback_user !='üåê –°–æ—Ü. —Å–µ—Ç–∏' and feedback_user !='üôã –û–ø–µ—Ä–∞—Ç–æ—Ä' and feedback_user != '‚òéÔ∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞' and feedback_user != '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—É' and feedback_user !='üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' and feedback_user !='‚ùóÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É' and feedback_user !='% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É' and feedback_user !='¬ÆFAQ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' and feedback_user != 'stop':
            if feedback_user == None: feedback_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
            variables.feed_back[str(message.chat.id)].update({"FeedBack" : feedback_user})

            txt = "--------–ñ–ê–õ–û–ë–ê--------\n" + "id: " + str(message.chat.id) + "\n–ò–º—è: " + variables.feed_back[str(message.chat.id)]["Name"] + "\n–Ø–∑—ã–∫: " + \
                account_settings[str(message.chat.id)].language + "\n–ü—Ä–∏—á–∏–Ω–∞: " + variables.feed_back[str(message.chat.id)]["Reason"] + "\n–ú–µ—Å—Ç–æ: " + \
                variables.feed_back[str(message.chat.id)]["Place"] + "\n–î–∞—Ç–∞: " + variables.feed_back[str(message.chat.id)]["Date"] + "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç: " + feedback_user + "\n---------------------"

            bot.send_message(message.chat.id, '‚ûï –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Ä–≤–∏—Å–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ SwissLab. –ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏ –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\nüôã –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!')
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data='Q' + str(message.chat.id))
            markup.add(item1)
            
            for id_p in variables.all_ids_arr:
                checkBlockedPeople(message, markup, id_p)

            oper_id = '0'
            database.insert_new_feedback_data(oper_id,  str(message.chat.id), txt, bot)
        else:
            if feedback_user != 'üìû telefon' and feedback_user != 'üíΩ Yozishmalar bazasi' and feedback_user !='üè† manzillari' and feedback_user !='üåê Biz ijtimoiy tarmoqlarda' and feedback_user !='üôã Operator' and feedback_user != "‚òéÔ∏è O'sha.  qo'llab-quvvatlash" and feedback_user != '‚úçÔ∏è Direktorga yozing' and feedback_user !='üìù buyurtma yaratish' and feedback_user !='‚ùóÔ∏è Shikoyat qoldiring' and feedback_user !='% Chegirma oling' and feedback_user !="¬ÆFAQ Ko'rsatma" and feedback_user != 'stop':
                if feedback_user == None: feedback_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
                variables.feed_back[str(message.chat.id)].update({"FeedBack" : feedback_user})

                txt = "--------–ñ–ê–õ–û–ë–ê--------\n" + "id: " + str(message.chat.id) + "\n–ò–º—è: " + variables.feed_back[str(message.chat.id)]["Name"] + "\n–Ø–∑—ã–∫: " + \
                    account_settings[str(message.chat.id)].language + "\n–ü—Ä–∏—á–∏–Ω–∞: " + variables.feed_back[str(message.chat.id)]["Reason"] + "\n–ú–µ—Å—Ç–æ: " + \
                    variables.feed_back[str(message.chat.id)]["Place"] + "\n–î–∞—Ç–∞: " + variables.feed_back[str(message.chat.id)]["Date"] + "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç: " + feedback_user + "\n---------------------"

                bot.send_message(message.chat.id, '‚ûï Laboratoriya xizmatini nazorat qilish SwissLab. Biz tanlaganingiz uchun tashakkur va xizmatimiz sifatini yaxshilashga yordam bersangiz xursand bolamiz!\nüôã Agar kerak bolsa, bizning operatorimiz sizga murojaat qiladi!')
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data='Q' + str(message.chat.id))
                markup.add(item1)

                for id_p in variables.all_ids_arr:
                    checkBlockedPeople(message, markup, id_p)

                oper_id = '0'
                database.insert_new_feedback_data(oper_id,  str(message.chat.id), txt, bot)
    
    elif feedback_user == 'stop':
        if lang == 0:
            bot.send_message(message.chat.id, '‚ûï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '‚ûï Amal bekor qilindi')
    else:
        if lang == 0:
            send = bot.send_message(message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop')
        else:
            send = bot.send_message(message.chat.id, '‚ûï Iltimos, sharhingizni togri formatda kiriting yoki yozing stop')
        bot.register_next_step_handler(send, fdBack_fill, lang)


def enterTag(message):
    global account_settings
    global mess
    tags = message.text
    if mess == "new":
        database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'tags', data = [])
        mess = ""
        
        account_settings = database.get_accounts_data()

    account_settings[str(message.chat.id)].tags.append(tags)
    
    database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'tags', data = account_settings[str(message.chat.id)].tags)       

    it = len(account_settings[str(message.chat.id)].tags)
    tet = "‚ûï –í–≤–µ–¥–µ–Ω–æ "
    tet += str(it)
    tet += " –∏–∑ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    send = bot.send_message(message.chat.id, tet)
    if (it < 10):
        bot.register_next_step_handler(send, enterTag)
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –±–æ—Ç–∞\n‚ùóÔ∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /tags")
def enterTag_Sec(message):
    global account_settings
    global mess
    tags = message.text
    if mess == "new":
        database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'tags', data = [])        
        mess = ""

        account_settings = database.get_accounts_data()

    account_settings[str(message.chat.id)].tags.append(tags)
    
    database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'tags', data = account_settings[str(message.chat.id)].tags)

    it = len(account_settings[str(message.chat.id)].tags)
    tet = "‚ûï Kirilgan "
    tet += str(it)
    tet += " 10 foydalanuvchilar"
    send = bot.send_message(message.chat.id, tet)
    if (it < 10):
        bot.register_next_step_handler(send, enterTag_Sec)
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è Foydalanuvchilar botni aktivlashtirgandan so'ng chegirmaga ega bo'lasiz agar do'stlaringiz ro'yxatini o'zgartirmoqchi bo'lsangiz bosing /tags")


def picPNGmaker(message):
    global account_settings
    img_text = message.chat.first_name
    img_text += ' '
    if message.chat.last_name != None:
        img_text += message.chat.last_name
    img = Image.open('lab.png')
    idraw = ImageDraw.Draw(img)
    hd = ImageFont.truetype('Arial.ttf', size = 45)
    idraw.text((150,280), img_text, fill = 'orange', font = hd)
    img.save('newAcc.png')
    with open('newAcc.png', 'rb') as f:
        contents = f.read()
    bot.send_photo(message.chat.id, contents, caption='üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞' if langCheck(message) else 'üí≥ Sizning kartangiz')
    os.remove('newAcc.png')


def refAdd(message):
    global account_settings
    ref_n = message.text    
    account_settings = database.get_accounts_data()
    ch_ref = "none"
    for k in account_settings.keys():
        if k == ref_n:
            ch_ref = "yes"
            break
    if ch_ref == "yes":
        if int(account_settings[ref_n].ref) < 10:
            account_settings[ref_n].ref = str(int(account_settings[ref_n].ref) + 1)
            
            database.change_account_data(account = account_settings[ref_n], parametr = 'ref', data = str(int(account_settings[ref_n].ref) + 1))
            account_settings = database.get_accounts_data()
            bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é!" if langCheck(message) else "‚úÖ Faollashtirish uchun rahmat!")
            bot.send_message(ref_n, "‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!" if langCheck(message) else "‚úÖ Yangi foydalanuvchi tavsiya kodini faollashtirdi!")
            keyboardRefMaker(message, 0 if langCheck(message) else 1)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–µ–Ω—ã" if langCheck(message) else "‚ö†Ô∏è Kodni faollashtirish tugadi")
            keyboardRefMaker(message, 0 if langCheck(message) else 1)
    elif ref_n == "stop":
        keyboardRefMaker(message, 0 if langCheck(message) else 1)
    else:
        bot.register_next_step_handler(bot.send_message(message.chat.id, '‚ùî –í–∞—à –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - stop' if langCheck(message) else '‚ùî Sizning kodingiz topilmadi, yana porobuyte yoki yozing - stop'), refAdd)


def userSebdText(message):
    global account_settings
    if message.text != 'stop':
        if account_settings[account_settings[str(message.chat.id)].feedback_st].language == '–†—É—Å—Å–∫–∏–π':
            oper_ans = '–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ #' + account_settings[str(message.chat.id)].feedback_st + ' –Ω–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É!üëá'
            bot.send_message(account_settings[str(message.chat.id)].feedback_st, oper_ans)
        else:  
            oper_ans = 'Sizning shikoyatingizga javob beruvchi operator #' + account_settings[str(message.chat.id)].feedback_st + ' !üëá'
            bot.send_message(account_settings[str(message.chat.id)].feedback_st, oper_ans)
        if message.photo != None:
            fileID = message.photo[-1].file_id
            file_info = bot.get_file(fileID)
            word_user_send = bot.download_file(file_info.file_path)
            bot.send_photo(account_settings[str(message.chat.id)].feedback_st, word_user_send)
        if message.text != None or message.caption != None:
            if message.text != None: word_user_send = message.text
            else: word_user_send = message.caption
            bot.send_message(account_settings[str(message.chat.id)].feedback_st, word_user_send)
            database.insert_new_feedback_data(str(message.chat.id), account_settings[str(message.chat.id)].feedback_st, word_user_send, bot)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        database.change_account_data(account = account_settings[account_settings[str(message.chat.id)].feedback_st], parametr = 'feedback_st', data = 'close')
        database.change_account_data(account = account_settings[str(message.chat.id)], parametr = 'feedback_st', data = 'close')        
        account_settings = database.get_accounts_data()

    else: bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!')



def inlineMessages(markup_text, call = None, message = None, person_id = None, markup_arr = [], action = True):
    """
      need param: inline_data = [text, callback_data] to make markup
    """
    person_id = person_id if person_id != None else message.chat.id if message != None else call.message.chat.id
    if action: bot.delete_message(person_id, call.message.message_id if call != None else message.message_id)
    markup = types.InlineKeyboardMarkup(row_width = 2)
    markup.add(*[types.InlineKeyboardButton(text = row[0], callback_data = row[1]) for row in markup_arr])
    bot.send_message(person_id, markup_text, reply_markup=markup)

def handlingdbCollection(message, call):
    bot.send_message(message.chat.id, ''.join([f"{str(row)}\n" for row in database.dbCollection(message = message, person_id = message.chat.id, step = variables.call_data_office_dict[call.data][1], action = 'show_data')[0]]))
    inlineMessages(markup_text = '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', message = message, markup_arr = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç'], ['–ò–∑–º–µ–Ω–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']])


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global account_settings
    global mess
    try:
        if call.data == '–†—É—Å—Å–∫–∏–π':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'language', data = '–†—É—Å—Å–∫–∏–π')
            
            account_settings = database.get_accounts_data()

            start_txt = openfileforRead(None, path.first_lang)

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data='–°–æ–≥–ª–∞—Å–µ–Ω')
            item2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data='–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å')
            markup.add(item1, item2)
            bot.send_message(call.message.chat.id, start_txt.format(call.message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
        elif call.data == '–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n‚ôªÔ∏è –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        elif call.data == '–°–æ–≥–ª–∞—Å–µ–Ω':
            inlineMessages(markup_text = '‚ôªÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞?', call = call, markup_arr = [['–î–∞', '–î–∞'], ['–ù–µ—Ç', '–ù–µ—Ç']])

        elif call.data == '–ù–µ—Ç':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            keyboardRefMaker(call.message, 0)
        elif call.data == '–î–∞':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥')
            bot.register_next_step_handler(send, refAdd)

        elif call.data == 'Ozbek':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'language', data = 'Ozbek')
            
            account_settings = database.get_accounts_data()

            start_txt = openfileforRead(None, path.second_lang)

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("ROZIMAN", callback_data='Agree')
            item2 = types.InlineKeyboardButton("Qo'shilmayman", callback_data='Disagree')
            markup.add(item1, item2)
            bot.send_message(call.message.chat.id, start_txt.format(call.message.chat, bot.get_me()),parse_mode='html', reply_markup=markup)
        elif call.data == 'Disagree':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "Siz shaxsiy ma'lumotlarni qayta ishlash uchun rad qilgan\n‚ôªÔ∏è Botni qayta ishga tushirish uchun bosing /start")
        elif call.data == 'Agree':
            inlineMessages(markup_text="‚ôªÔ∏è Yo'naltiruvchi havola bormi?", call = call, markup_arr = [['Ha', 'Yes'], ["Yo'q", 'No']])
        elif call.data == 'No':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            keyboardRefMaker(call.message, 1)
        elif call.data == 'Yes':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï Kodni yuboring')
            bot.register_next_step_handler(send, refAdd)

        elif call.data == '–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
            bot.register_next_step_handler(send, fdbackName, 0)
        elif call.data == 'Shikoyat yozing':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï Telefon raqamingizni kiriting')
            bot.register_next_step_handler(send, fdbackName, 1)

        elif call.data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å tag –¥—Ä—É–∑–µ–π':
            mess = "new"
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–µ–Ω–æ 0 –∏–∑ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            bot.register_next_step_handler(send, enterTag)
        elif call.data == 'Send friends @tags':
            mess = "new"
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï 10 ta foydalanuvchidan 0 ga kirgan')
            bot.register_next_step_handler(send, enterTag_Sec)

        elif call.data == '–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangStart'], ['Ozbek', 'OzbekLangStart']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangStart':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.first_lang)
        elif call.data == 'OzbekLangStart':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.second_lang)

        elif call.data == 'FAQ —Ç–µ–∫—Å—Ç':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangFAQ'], ['Ozbek', 'OzbekLangFAQ']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.FAQ_label)
        elif call.data == 'OzbekLangFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_FAQ_label)

        elif call.data == '–¢–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangOper'], ['Ozbek', 'OzbekLangOper']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangOper':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.oper_label)
        elif call.data == 'OzbekLangOper':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_oper_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangTele'], ['Ozbek', 'OzbekLangTele']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangTele':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.telephone_num)
        elif call.data == 'OzbekLangTele':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_telephone_num)

        elif call.data == '–¢–µ–∫—Å—Ç –∞–¥—Ä–µ—Å—Å–∞':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangAdress'], ['Ozbek', 'OzbekLangAdress']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangAdress':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.address_label)
        elif call.data == 'OzbekLangAdress':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_address_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangOrder'], ['Ozbek', 'OzbekLangOrder']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangOrder':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.order_label)
        elif call.data == 'OzbekLangOrder':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_order_label)

        elif call.data == '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangRecv'], ['Ozbek', 'OzbekLangRecv']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangRecv':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.recv_label)
        elif call.data == 'OzbekLangRecv':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_recv_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangDisc'], ['Ozbek', 'OzbekLangDisc']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangDisc':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.discount_label)
        elif call.data == 'OzbekLangDisc':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_discount_label)

        elif call.data == '–¢–µ–∫—Å—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangSocial'], ['Ozbek', 'OzbekLangSocial']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangSocial':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.social_web)
        elif call.data == 'OzbekLangSocial':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_social_web)

        elif call.data == '–¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞':
            inlineMessages(markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', call = call, markup_arr = [['–†—É—Å—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–πLangOperFAQ'], ['Ozbek', 'OzbekLangOperFAQ']])
        elif call.data == '–†—É—Å—Å–∫–∏–πLangOperFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, '‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            bot.register_next_step_handler(send, saveNewText, path.FAQoper_label)
        elif call.data == 'OzbekLangOperFAQ':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, saveNewText, path.sec_FAQoper_label)

        elif call.data == 'üëç' or call.data == 'üëé':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!' if langCheck(person_id = call.message.chat.id) else 'Baholash uchun rahmat!')
            
        elif call.data == '–ò–∑–º–µ–Ω–∏—Ç—å': 
            bot.delete_message(call.message.chat.id, call.message.message_id)
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton('–ù–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞', callback_data='–ù–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞')
            item2 = types.InlineKeyboardButton('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ', callback_data='–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ')
            item3 = types.InlineKeyboardButton('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data='–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞')
            item4 = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É —Å—Ä–µ–¥—Å—Ç–≤', callback_data='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É —Å—Ä–µ–¥—Å—Ç–≤')
            item5 = types.InlineKeyboardButton('–î–∞–Ω–Ω—ã–µ –ø–æ –ü–¶–†', callback_data='–î–∞–Ω–Ω—ã–µ –ø–æ –ü–¶–†')
            item6 = types.InlineKeyboardButton('–î–∞–Ω–Ω—ã–µ –ø–æ –ü–¶–† —ç–∫—Å–ø—Ä–µ—Å—Å', callback_data='–î–∞–Ω–Ω—ã–µ –ø–æ –ü–¶–† —ç–∫—Å–ø—Ä–µ—Å—Å')
            item7 = types.InlineKeyboardButton('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤', callback_data='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤')
            item8 = types.InlineKeyboardButton('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
            markup.add(item1, item2, item3, item4, item5, item6, item7, item8)
            bot.send_message(call.message.chat.id, '–ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=markup)
            
        elif call.data in variables.call_data_office_dict.keys():
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            bot.register_next_step_handler(send, handlingdbCollection, call = call)
        elif call.data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            database.dbCollection(call.message, person_id = call.message.chat.id, action = 'send_collection_to_oper')
            bot.send_message(call.message.chat.id, '–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
            keyboardRefMaker(call.message, 0 if langCheck(person_id = str(call.message.chat.id)) else 1, str(call.message.chat.id))
        elif call.data == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            database.dbCollection(call.message, person_id = call.message.chat.id, action = 'confirm_collection')
            bot.send_message(call.message.chat.id, '–û—Ç—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!')
            keyboardRefMaker(call.message, 0 if langCheck(person_id = str(call.message.chat.id)) else 1, str(call.message.chat.id))
            
        elif call.data[0] == 'Q':
            if account_settings[call.data[1:]].feedback_st == 'open':
                
                database.change_account_data(account = account_settings[call.data[1:]], parametr = 'feedback_st', data = 'close')        
                database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'feedback_st', data = call.data[1:])
                account_settings = database.get_accounts_data()

                send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                bot.register_next_step_handler(send, userSebdText)
            else:
                bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ stop")
                
                database.change_account_data(account = account_settings[call.data[1:]], parametr = 'feedback_st', data = 'close')        
                database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'feedback_st', data = call.data[1:])
                account_settings = database.get_accounts_data()

                send = bot.send_message(call.message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                bot.register_next_step_handler(send, userSebdText)
        else:
            if account_settings[str(call.message.chat.id)].conversation == 'close':
                for k in account_settings.keys():
                    if k == call.data and account_settings[k].conversation == 'mid':
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        item1 = types.KeyboardButton("üîô –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                        item2 = types.KeyboardButton("‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
                        item3 = types.KeyboardButton("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞")
                        item4 = types.KeyboardButton("üôã –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è")
                        item5 = types.KeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
                        item6 = types.KeyboardButton("‚úçÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä")
                        item7 = types.KeyboardButton("üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä")
                        markup.row(item1, item2).row(item3, item4, item5).row(item6, item7)
                        account_settings[str(call.message.chat.id)].tags.append(str(k))
                        database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'tags', data = account_settings[str(call.message.chat.id)].tags)        
                        database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'conversation', data = 'open')
                        database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'timer_conv', data = int(time.time()))
                        account_settings[k].tags.append(str(call.message.chat.id))
                        account_settings[k].tags.append("0")
                        database.change_account_data(account = account_settings[k], parametr = 'tags', data = account_settings[k].tags)        
                        database.change_account_data(account = account_settings[k], parametr = 'conversation', data = 'open')
                        database.change_account_data(account = account_settings[k], parametr = 'timer_conv', data = int(time.time()))
                        account_settings = database.get_accounts_data()

                        if account_settings[k].language == "–†—É—Å—Å–∫–∏–π":
                            oper_ans = "üìû –ù–∞–π–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä #" + str(call.message.chat.id) + " , –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                            bot.send_message(k, oper_ans)
                        else:
                            oper_ans = "üìû Operator #" + str(call.message.chat.id) + " topildi, yozishmalar faollashtirildi"
                            bot.send_message(k, oper_ans)
                        bot.send_message(str(call.message.chat.id), "üìû –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É!", reply_markup=markup)
                        user_id = str(k)
                        oper_id = str(call.message.chat.id)
                        database.insert_new_data(user_id, oper_id, bot)
                        break
                if account_settings[str(call.message.chat.id)].conversation != 'open':
                    if account_settings[str(call.data)].conversation != 'open':
                        u_tex = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id: "
                        u_tex += str(call.data)
                        u_tex += " –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–∂–∏–º!\n–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤..."
                        bot.send_message(call.message.chat.id, u_tex)
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        item1 = types.KeyboardButton("üîô –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                        item2 = types.KeyboardButton("‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
                        item3 = types.KeyboardButton("‚ùóÔ∏è –ñ–∞–ª–æ–±–∞")
                        item4 = types.KeyboardButton("üôã –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è")
                        item5 = types.KeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
                        item6 = types.KeyboardButton("‚úçÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä")
                        item7 = types.KeyboardButton("üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä")
                        markup.row(item1, item2).row(item3, item4, item5).row(item6, item7)
                        if account_settings[str(call.data)].language != "–†—É—Å—Å–∫–∏–π":
                            item1 = types.KeyboardButton("üîô Operator chaqiruvini rad etish")
                            item2 = types.KeyboardButton("‚ùî Ko'rsatma")
                        user_markup.add(item1, item2)
                        
                        account_settings[str(call.message.chat.id)].tags.append(str(call.data))
                        database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'tags', data = account_settings[str(call.message.chat.id)].tags)
                        database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'conversation', data = 'open')
                        database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'timer_conv', data = int(time.time()))
                        account_settings[str(call.data)].tags.append(str(call.message.chat.id))
                        database.change_account_data(account = account_settings[str(call.data)], parametr = 'tags', data = account_settings[str(call.data)].tags)
                        account_settings[str(call.data)].tags.append("0")
                        database.change_account_data(account = account_settings[str(call.data)], parametr = 'tags', data = account_settings[str(call.data)].tags)
                        database.change_account_data(account = account_settings[str(call.data)], parametr = 'conversation', data = 'open')
                        database.change_account_data(account = account_settings[str(call.data)], parametr = 'timer_conv', data = int(time.time()))
                        account_settings = database.get_accounts_data()

                        try:
                            if account_settings[str(call.data)].language == "–†—É—Å—Å–∫–∏–π":
                                oper_ans = "üìû –û–ø–µ—Ä–∞—Ç–æ—Ä #" + str(call.message.chat.id) + " –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É"
                                bot.send_message(str(call.data), oper_ans, reply_markup=user_markup)
                            else:
                                oper_ans = "üìû Operator #" + str(call.message.chat.id) + " yozishmalarni faollashtirdi"
                                bot.send_message(str(call.data), oper_ans, reply_markup=user_markup)
                            bot.send_message(str(call.message.chat.id), "üìû –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É!", reply_markup=markup)
                            user_id = str(call.data)
                            oper_id = str(call.message.chat.id)
                            database.insert_new_data(user_id, oper_id, bot)
                        except Exception as e:
                            database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'conversation', data = 'close')
                            database.change_account_data(account = account_settings[str(call.data)], parametr = 'tags', data = [])
                            database.change_account_data(account = account_settings[str(call.message.chat.id)], parametr = 'tags', data = [])
                            account_settings = database.get_accounts_data()
                            bot.send_message(call.message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–∏–ª –±–æ—Ç–∞!')
                    else:
                        bot.send_message(str(call.message.chat.id), "–î—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É!")
            else:
                bot.send_message(call.message.chat.id, "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π!")


    except Exception as e:
        print("Error in the 'call' part!", repr(e))
        for id_er in variables.label_change_ids_arr:
            bot.send_message(int(id_er), "Error in the 'call' part!\n\n"+ traceback.format_exc())

if __name__ == '__main__':
    start_process()
    try:
        bot.polling(none_stop=True)
    except Exception as _:
        for id_er in variables.label_change_ids_arr:
            bot.send_message(int(id_er), f"Program error!\n\n{traceback.format_exc()}")
