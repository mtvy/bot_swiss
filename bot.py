#/==================================================================\#
#                                                                    #
#\==================================================================/#

#\==================================================================/#
#/========================/ installed libs \========================\#

import traceback, \
         schedule, \
           telebot, \
               time, \
                  io, \
                  os
from PIL import Image,  \
            ImageDraw,   \
            ImageFont 

from multiprocessing import Process
from telebot import types

#--------------------------\ project files /-------------------------#

from variables import *
from database import *
from utility import *
from classes import *
from debug import *
from path import *
from emj import * 

#\==================================================================/#


#\==================================================================/#
TOKEN = '5361529726:AAHkDG9SoOJUA_1F9rWnIjTXkxW_kpq4vQg'
#\==================================================================/#


#\==================================================================/#
accounts = get_accounts()
#\==================================================================/#

#\==================================================================/#
def openfileforRead(action = None, file = None, text = '') -> str:
    return text.join([i for i in io.open(file, encoding='utf-8')])

def langCheck(account, message = None, id = None) -> bool:
    """
    This def returns True if the language is Russian.
    """
    return True if account[str(message.chat.id) if id == None else str(id)].language == "–†—É—Å—Å–∫–∏–π" else False

def saveNewText(message, file) -> None:
    bot.send_message(message.chat.id, changes_message[saveText(message.text, file, 'w')])

def checkOperId(person_id, action) -> bool:
    """
    Use this method to check the role of a person.
    Parameters below described in py
    
    all_ids_arr
    label_change_ids_arr        simple_oper_ids_arr
    doctor_oper_ids_arr         support_oper_ids_arr
    director_oper_ids_arr       feedback_oper_ids_arr
    collection_oper_ids_arr     collection_cash_ids_arr
    """
    return True if person_id in [id for id in action] else False

def markupMaker(mode, button) -> types.ReplyKeyboardMarkup():
    markup =  types.ReplyKeyboardMarkup(resize_keyboard=True)
    pin    = [types.KeyboardButton(tag) for tag in button.keys() if mode in button[tag]]

    if 'user' != mode != 'redirect': markup.add(*pin) 
    elif         mode != 'redirect': markup.row(*pin[0:2], pin[3]).row(*pin[5:6], pin[8]).row(pin[10]).row(pin[2:8:5]).row(pin[4:10:5])
    else                           : markup.row(pin[0:2]).row(pin[2:4], pin[4]).row(pin[5:7])
    return markup
#\==================================================================/#


#\==================================================================/#
bot = telebot.TeleBot(TOKEN)
#\==================================================================/#


#\==================================================================/#
class P_schedule:
    """
    This class reposts messages from the telegram channel.
    """

    def start_schedule():
        schedule.every(30).seconds.do(P_schedule.send_post)
        while True:
            schedule.run_pending()
            time.sleep(1)

    def send_post():
        c_ex = 0
        message_id = dbMessageId(action = 'take_id')[0][0]
        account = get_accounts()
        for account in account.keys():
            try:
                bot.forward_message(int(account), CHANNEL_ID, message_id)
                time.sleep(1)
            except Exception as _:
                c_ex+=1
                continue
            try:
                if (int(time.time()) - account[account].timer_conv) > 900 and account[account].conversation == 'open':
                    stopConversation(message = None, lang = 0 if langCheck(account, message = None, person_id = account) else 1, pers_id = account)
            except Exception as _: pass
        if c_ex == len(account): c_ex = 0
        else:
            try:
                bot.forward_message(281321076, CHANNEL_ID, message_id)
                dbMessageId(action = 'save_id', message_id = message_id + 1)
            except Exception as error:
                print(f"Error pushing news!\n\n{repr(error)}")
                for id_er in label_change_ids_arr:
                    bot.send_message(int(id_er), f"Error pushing news!\n\n{repr(error)}")
#\==================================================================/#


#\==================================================================/#
@bot.message_handler(commands=['start'])
def welcome(message):
    global accounts
    
    accounts = get_accounts()

    _accounts = [str(message.chat.id)]
    
    for key in accounts.keys():
        if accounts[key].telegram_id == _accounts[0]:
            if accounts[key].language == "–†—É—Å—Å–∫–∏–π":
                if accounts[key].personal_data == "YES":
                    bot.send_message(message.chat.id,
                        f"{EMJ_DOCTOR}–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!"
                    )
                    keyboardRefMaker(message, 0)
                elif accounts[accounts].personal_data == "NO":
                    inlineMessages(
                        markup_text = openfileforRead(None, first_lang), 
                        message     = message, 
                        markup_arr  = [["–°–æ–≥–ª–∞—Å–µ–Ω"   , "–°–æ–≥–ª–∞—Å–µ–Ω"   ], 
                                       ["–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", "–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å"]], 
                        action      = False
                    )
            elif accounts[accounts].language == "Ozbek":
                if accounts[accounts].personal_data == "YES":
                    bot.send_message(message.chat.id,
                        "üî±Siz allaqachon ro'yxatdan o'tgansiz!"
                    )
                    keyboardRefMaker(message = message, lang = 1)
                elif accounts[accounts].personal_data == "NO":
                    inlineMessages(
                        markup_text = openfileforRead(None, second_lang), 
                        message     = message,
                        markup_arr  = [["ROZIMAN"      , "Agree"   ], 
                                       ["Qo'shilmayman", "Disagree"]], 
                        action      = False
                    )
            else:
                inlineMessages(
                    markup_text = "üî±Choose language", 
                    message     = message, 
                    markup_arr  = [["–†—É—Å—Å–∫–∏–π", "–†—É—Å—Å–∫–∏–π"], 
                                   ["Ozbek", "Ozbek"]], 
                    action      = False
                )
            break
    else:
        _accounts += [str(message.chat.username)    , 
                      str(message.chat.first_name) , 
                      []                          , 
                      'close'                    , 
                      '0'                       , 
                      []                       , 
                      '0'                     ,  
                      'NO'                   , 
                      None                  , 
                      'close'              , 
                      0
        ]
        account = Account(_accounts)
        insert_account(account)
        accounts[account.telegram_id] = account
        inlineMessages(
            markup_text = "üî±Choose language", 
            msg         = message, 
            markup_arr  = [["–†—É—Å—Å–∫–∏–π", "–†—É—Å—Å–∫–∏–π"], 
                           ["Ozbek"  , "Ozbek"]], 
            action      = False
        )
#\==================================================================/#


#\==================================================================/#
@bot.message_handler(commands=['changeLabel'])
def adderNewLabel(message) -> None:
    if checkOperId(str(message.chat.id), label_change_ids_arr):
        inlineMessages(
            markup_text = "–ö–∞–∫–æ–π –±–ª–æ–∫ –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", 
            msg = message, 
            markup_arr = markup_change_label_arr, 
            action = False
        )
#\==================================================================/#


#\==================================================================/#
def sendReqtoOper(which_oper, oper_send_text, markup) -> None:
    for oper_id in action_oper_select[which_oper]:
        bot.send_message(int(oper_id), 
            oper_send_text, 
            reply_markup=markup
        )

def operKeyboardMaker(message, which_oper, lang) -> None:
    global accounts

    accounts[str(message.chat.id)].conversation = 'mid'
    message_ids_dict[str(message.chat.id)] = message

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton(f"{EMJ_BACK_ARROW} –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" 
            if lang == 0 else f"{EMJ_BACK_ARROW} Operator chaqiruvini rad etish"
        ), 
        types.KeyboardButton(f"{EMJ_QUESTION} –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" 
            if lang == 0 else f"{EMJ_QUESTION} Ko'rsatma"
        )
    )

    bot.send_message(message.chat.id, f"{EMJ_RAISING_HAND} –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º" 
                    if lang == 0 else f"{EMJ_RAISING_HAND} Operator bilan yozishmalar rejimi yoqilgan", reply_markup=markup)

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=str(message.chat.id)))
    
    insert_message(message.chat.id, 0)

    sendReqtoOper(which_oper = which_oper, oper_send_text = (f"-------–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–ø–∏—Å–∫–∏!-------\n"
                                                             f"id: {message.chat.id} \n"
                                                             f"–ò–º—è: {message.chat.first_name} \n"
                                                             f"–§–∞–º–∏–ª–∏—è: {message.chat.last_name} \n"
                                                             f"Username: @ {message.chat.username} \n"
                                                             f"–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n----------------------------"), markup = markup)

def dbDateSortEnter(message, action):
    nextStepWait(person_id = message.chat.id, text = db_conv_message['date'], func = dbSortEnter, args = [action])
def dbSortEnter(message, action):
    date_text = get_data(date = message.text, action = action)
    if date_text: 
        bot.send_message(message.chat.id, db_conv_message['no_date'])
    else:
        bot.send_message(message.chat.id, date_text)
        nextStepWait(person_id = message.chat.id, text = db_conv_message['name'], func = dbIdSortEnter, args = [action])
def dbIdSortEnter(message, action):
    id_text = get_text(message.text, action)
    bot.send_message(message.chat.id, id_text if id_text != 0 else '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ!')
    return

def pushingLabelFromFile(message, path, path_sec):
    bot.send_message(message.chat.id, openfileforRead(None, path if langCheck(message) 
                                                                 else path_sec).format(message.chat, bot.get_me()),parse_mode='html')

def operInit(message, action, set_act, id_check, deactivation=None):
    if checkOperId(person_id = str(message.chat.id), action = action): bot.send_message(message.chat.id, "–í—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä!")
    else: operKeyboardMaker(message = message, which_oper = set_act, lang = 0 if langCheck(message) else 1)
        
def redirectInit(message, action):
    global account

    bot.send_message(str(message.chat.id), action)
    if len(account[str(message.chat.id)].tags) != 0:

        bot.send_message(str(account[str(message.chat.id)].tags[0]), action)
        
        update_account(account = account[account[str(message.chat.id)].tags[0]], parametr = 'conversation', data = 'close')
        update_account(account = account[account[str(message.chat.id)].tags[0]], parametr = 'tags', data = [])        
        account = get_accounts()

        keyboardRefMaker(message = message, lang = 0 if langCheck(message) else 1, pers_id = account[str(message.chat.id)].tags[0])

    keyboardRefMaker(message = message, lang = 0)
    inlineMessages(markup_text = '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!' if langCheck(message) else 'Operator ishini baholang!', 
                   person_id = account[str(message.chat.id)].tags[0] if checkOperId(person_id = str(message.chat.id), 
                   action = all_ids_arr) else str(message.chat.id), markup_arr = [["üëç", "üëç"], ["üëé", "üëé"]], action = False)

   
def stopConversation(message, lang, pers_id=None, action = None):
    global account
    person_id = pers_id if pers_id != None else str(message.chat.id)
    push_text = f"{EMJ_EXCLAMATION} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞" if lang == 0 or lang == '–†—É—Å—Å–∫–∏–π' else f"{EMJ_EXCLAMATION} Muloqotni yakunlash"
    bot.send_message(person_id, push_text)
    if len(account[person_id].tags) != 0:
        bot.send_message(str(account[person_id].tags[0]), push_text)
            
        update_account(account = account[account[person_id].tags[0]], parametr = 'conversation', data = 'close')
        update_account(account = account[account[person_id].tags[0]], parametr = 'tags', data = [])        
        account = get_accounts()

        keyboardRefMaker(None, 0 if account[account[person_id].tags[0]].language == "–†—É—Å—Å–∫–∏–π" else 1, account[person_id].tags[0])
    keyboardRefMaker(None, lang, person_id)
    
    if not checkOperId(person_id = person_id, action = all_ids_arr):
        user_id = account[person_id].tags[0] if checkOperId(person_id = person_id, action = all_ids_arr) and action == None else person_id
        inlineMessages(markup_text = '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!' if langCheck(person_id = user_id) else 'Operator ishini baholang!', 
                       person_id = user_id, markup_arr = [['üëç', 'üëç'], ['üëé', 'üëé']], action = False)
            
    update_account(account = account[person_id], parametr = 'conversation', data = 'close')
    update_account(account = account[person_id], parametr = 'tags', data = [])        
    account = get_accounts()
            
    change_status(person_id)

def closeConversation(message):
    global account
            
    update_account(account = account[str(message.chat.id)], parametr = 'conversation', data = 'close')
    update_account(account = account[str(message.chat.id)], parametr = 'tags', data = [])        
    account = get_accounts()
            
    change_status(message.chat.id)


def setCollectionKeyboard(message, person_id, show_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–µ–¥ –æ—Ñ–∏—Å'):
    bot.send_message(person_id, show_text, reply_markup = markupMaker(action = 'office', button_text = office_markup_dict))

def selectOffice(message, person_id, step, push_text = '', data = ''):
    if checkOperId(person_id = person_id, action = collection_oper_ids_arr):
        if show_text_dict[step]:
            dbCollection(message = message, person_id = person_id, step = step - 1, database_push_data = message.text)
            nextStepWait(person_id = person_id, text = show_text_dict[step], func = selectOffice, args = [person_id, step + 1])
        else:
            dbCollection(message = message, person_id = person_id, step = step - 1, database_push_data = message.text)
            for line, row in zip(add_text_dict, dbCollection(message = message, person_id = person_id, step = step, database_push_data = 'admin')[-1]):
                data += f"{line} {row}\n"
            bot.send_message(person_id, data)
            inlineMessages(markup_text = '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', message = message, 
                           markup_arr = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç'], ['–ò–∑–º–µ–Ω–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']])

    elif checkOperId(person_id = person_id, action = collection_cash_ids_arr):
        dbCollection(message = message, person_id = person_id, database_push_data = message.text, action = 'cashier_init')
        database_data = dbCollection(message = message, person_id = person_id, database_push_data = message.text, step = 9, action = 'show_collection_to_cashier')
        if len(database_data) > 0:
            for line, row in zip(add_text_dict, database_data[-1]):
                data += f"{line} {row}\n"
            bot.send_message(person_id, data)
            inlineMessages(markup_text = '–ú–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', message = message, markup_arr = [['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], ['–ò–∑–º–µ–Ω–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']])
        else:
            bot.send_message(person_id, '–î–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –æ—Ñ–∏—Å—É –Ω–µ—Ç!')
#\==================================================================/#


#\==================================================================/#
@bot.message_handler(content_types=['text', 'photo'])
def lol(message):
    global account
    account = get_accounts()
    
    if message.chat.type == 'private':
        if message.text in message_text_dict.keys():
            if   message_text_dict[message.text][0] == 'office': 
                selectOffice(message, str(message.chat.id), STEP_FIRST)
            elif message_text_dict[message.text][0] == 'text_show': 
                pushingLabelFromFile(message, message_text_dict[message.text][1], message_text_dict[message.text][2])
            elif message_text_dict[message.text][0] == 'oper_show': 
                operInit(message, message_text_dict[message.text][1], message_text_dict[message.text][2], str(message.chat.id))
            elif message_text_dict[message.text][0] == 'oper_close': 
                stopConversation(message, message_text_dict[message.text][1])
            elif message_text_dict[message.text][0] == 'redirect'  :
                redirectInit(message, f"{EMJ_EXCLAMATION} –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {message_text_dict[message.text][1]}")
                operInit(message_ids_dict[account[str(message.chat.id)].tags[0]], message_text_dict[message.text][2], 
                         message_text_dict[message.text][3], closeConversation(message))
        elif message.text == f'{EMJ_BACK_ARROW} –ù–∞–∑–∞–¥': 
            keyboardRefMaker(message = message, lang = account[str(message.chat.id)].language)
        elif message.text == f'{EMJ_EXCLAMATION} –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É' or message.text == f'{EMJ_EXCLAMATION} Shikoyat qoldiring':
            if checkOperId(person_id = str(message.chat.id), action = feedback_oper_ids_arr): dbDateSortEnter(message = message, action = 'feedback_tb')
            else:
                account[str(message.chat.id)].feedback_st = 'open'
                inlineMessages(markup_text = openfileforRead(None, recv_label if langCheck(message) else sec_recv_label), message = message, 
                               markup_arr = [["–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É", "–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É"] if langCheck(message) else ["Shikoyat yozing", "Shikoyat yozing"]], action = False)
        elif message.text == f"{EMJ_MONEY_BAG} –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è": 
            setCollectionKeyboard(message = message, person_id = str(message.chat.id))
        elif message.text == f'{EMJ_DISK} –ë–î –ø–µ—Ä–µ–ø–∏—Å–æ–∫' or message.text == f'{EMJ_DISK} Yozishmalar bazasi':
            if checkOperId(person_id = str(message.chat.id), action = all_ids_arr): dbDateSortEnter(message = message, action = 'message_tb')
            else: bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –±–∞–∑—ã!' if langCheck(message) else "Sizda bazani o'qish huquqi yo'q!")
        elif message.text == '% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É' or message.text == '% Chegirma oling':
            if account[str(message.chat.id)].discount == "0" and account[str(message.chat.id)].ref == "0":
                bot.send_message(message.chat.id, openfileforRead(None, discount_label if langCheck(message) else sec_discount_label) + ("\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: " if langCheck(message) else  f"\nSizning tavsiyangiz kodi: ") + str(message.chat.id).format(message.chat, bot.get_me()),parse_mode='html')
            elif account[str(message.chat.id)].ref == "10":
                update_account(account = account[str(message.chat.id)], parametr = 'discount', data = '10')       
                account = get_accounts()
                bot.send_message(message.chat.id, f"{EMJ_DONE} –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!" if langCheck(message) 
                                             else f"{EMJ_DONE} Siz maksimal chegirma bor!")
                picPNGmaker(message)
            else:
                if account[str(message.chat.id)].discount == "10":
                    bot.send_message(message.chat.id, f"{EMJ_DONE} –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!" if langCheck(message) 
                                                 else f"{EMJ_DONE} Siz maksimal chegirma bor!")
                    picPNGmaker(message)
                else:
                    bot.send_message(message.chat.id, f"{EMJ_CROSS} –í–∞—à–∏ –¥—Ä—É–∑—å—è –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞!\n"
                                                      f"{EMJ_CROSS} –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π {account[str(message.chat.id)].ref} –∏–∑ 10" if langCheck(message) 
                                                 else f"{EMJ_CROSS} Sizning do'stlaringiz hali botni faollashtirmagan!\n"
                                                      f"{EMJ_CROSS} Jami aktivatsiyalar {account[str(message.chat.id)].ref} dan 10")
                    picPNGmaker(message)
        elif message.text == f"{EMJ_EXCLAMATION} –ñ–∞–ª–æ–±–∞":
            redirectInit(message, f"{EMJ_EXCLAMATION} –û–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª –∂–∞–ª–æ–±")
            account[account[str(message.chat.id)].tags[0]].feedback_st = 'open'
            inlineMessages(markup_text = openfileforRead(None, recv_label if langCheck(message) else sec_recv_label), 
                           person_id = account[str(message.chat.id)].tags[0], markup_arr = [ ["–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É", "–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É"] if langCheck(message) 
                                                                                                 else ["Shikoyat yozing", "Shikoyat yozing"] ], action = False)
            closeConversation(message)        
        else:
            if account[str(message.chat.id)].conversation == 'open':
                if checkOperId(person_id = str(message.chat.id), action = all_ids_arr):
                    update_account(account = account[account[str(message.chat.id)].tags[0]], parametr = 'timer_conv', data = int(time.time()))
                    sm_id = 'Operator: '
                else:
                    update_account(account = account[str(message.chat.id)], parametr = 'timer_conv', data = int(time.time()))
                    sm_id = 'User: '
      
                account = get_accounts()

                if message.text != None:
                    sm_id = f'{sm_id}{message.text}\n'
                    bot.send_message(account[str(message.chat.id)].tags[0], message.text)
                elif message.caption != None:
                    sm_id = f'{sm_id}{message.caption}\n'
                    bot.send_message(account[str(message.chat.id)].tags[0], message.caption)
                if message.photo != None:
                    sm_id = f'{sm_id}PHOTO\n'
                    bot.send_photo(account[str(message.chat.id)].tags[0], bot.download_file(bot.get_file(message.photo[-1].file_id).file_path))
                insert_text(sm_id, message.chat.id)

def picPNGmaker(message):
    img = Image.open('bonus_card/lab.png')
    ImageDraw.Draw(img).text((150,280), f"{message.chat.first_name} {'' if message.chat.last_name == None else message.chat.last_name}", fill = 'orange', font = ImageFont.truetype('Arial.ttf', size = 45))
    img.save('newAcc.png')
    bot.send_photo(message.chat.id, open('newAcc.png', 'rb').read(), caption = 'üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞' if langCheck(message) else 'üí≥ Sizning kartangiz')
    os.remove('newAcc.png')

def keyboardRefMaker(message, lang, pers_id=None):
    global account
    person_id = pers_id if pers_id != None else str(message.chat.id)
    markup = markupMaker(action = 'admin' 
                         if checkOperId(person_id = person_id, action = collection_cash_ids_arr + collection_oper_ids_arr) else 'oper' 
                         if checkOperId(person_id = person_id, action = all_ids_arr) else 'user', button_text = buttons_ru_text 
                         if lang or lang == '–†—É—Å—Å–∫–∏–π' else buttons_uz_text
                        )
    bot.send_message(person_id, openfileforRead(None, FAQ_label if lang == 0 or lang == '–†—É—Å—Å–∫–∏–π' else sec_FAQ_label) 
                                if not checkOperId(person_id, all_ids_arr) else '–û—Ç–∫—Ä—ã—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!', parse_mode='html', reply_markup=markup)
    
    if person_id != pers_id:        
        account = get_accounts()
        update_account(account = account[str(message.chat.id)], parametr = 'personal_data', data = 'YES')
        account = get_accounts()


def checkBlockedPeople(markup, pers_id, txt):
    try: bot.send_message(pers_id, txt, reply_markup=markup)
    except Exception as error:
        for id_er in label_change_ids_arr:
            bot.send_message(int(id_er), f"User {pers_id} blocked!\n\n{repr(error)}")


def fdbackName(message, lang):
    global account
    name_user = message.text
    if name_user != 'stop':
        if name_user is None: name_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'

        feed_back[str(message.chat.id)] = {
                                                     "Name" : name_user, 
                                                     "Username" : str(message.chat.username), 
                                                     "Language" : account[str(message.chat.id)].language
                                                    }
        nextStepWait(person_id = message.chat.id, text = f'{EMJ_PLUS} –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' if lang == 0 
                                                    else f'{EMJ_PLUS} Telefon raqamingizni kiriting', func = fdbackTele, args = [lang])
    else:
        bot.send_message(message.chat.id, f'{EMJ_PLUS} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
def fdbackTele(message, lang):
    tele_num = message.text
    if tele_num.isdigit():

        feed_back[str(message.chat.id)].update({
                              'Telephone number' : tele_num if tele_num != None else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
                                                         })

        if lang: bot.send_message(message.chat.id, f'{EMJ_PLUS} –ñ–∞–ª–æ–±–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–µ—Ç—ã—Ä–µ —ç—Ç–∞–ø–∞:\n'
                                                    '1) –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã –∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏\n'
                                                    '2) –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞/–º–µ—Å—Ç–∞, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç\n'
                                                    '3) –î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞\n'
                                                    '4) –ò–º—è –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–æ—à—ë–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç\n'
                                                   f'{EMJ_CROSS} –î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop')
        else:    bot.send_message(message.chat.id, f'{EMJ_PLUS} Shikoyat tort bosqichda tuziladi:\n'
                                                    '1) Shikoyat sababi\n'
                                                    '2) Hodisa sodir bolgan filial/joyni belgilash\n'
                                                    '3) Hodisa sanasi\n'
                                                    '4) Mojaro yuz bergan raqibning nomi yoki tarifi\n'
                                                   f'{EMJ_CROSS} Operatsiyani bekor qilish uchun yozing stop')
                                                                       
        nextStepWait(person_id = message.chat.id, text = f'{EMJ_PLUS} –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏' 
                                       if lang == 0 else f'{EMJ_PLUS} Shikoyat sababini va ariza raqamini yozing', func = fdbackReason, args = [lang])
    elif tele_num == 'stop': bot.send_message(message.chat.id, f'{EMJ_PLUS} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' 
                                             if lang == 0 else f'{EMJ_PLUS} Amal bekor qilindi')
    else: nextStepWait(person_id = message.chat.id, text = f'{EMJ_PLUS} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 998999999999 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop' 
                                         if lang == 0 else f'{EMJ_PLUS} Telefon raqamingizni formatda kiriting 9997777777777 yoki yozing stop', func = fdbackTele, args = [lang])
def fdbackReason(message, lang):
    reason_send = message.text
    if reason_send != 'stop':
        if reason_send == None: reason_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        feed_back[str(message.chat.id)].update({"Reason" : reason_send})
        
        nextStepWait(person_id = message.chat.id, text = f'{EMJ_PLUS} –ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª/–º–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç' 
                                       if lang == 0 else f'{EMJ_PLUS} Hodisa sodir bolgan filial/joyni yozing', func = fdbackPlace, args = [lang])
    else:
        bot.send_message(message.chat.id, f'{EMJ_PLUS} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' 
                        if lang == 0 else f'{EMJ_PLUS} Amal bekor qilindi')  
def fdbackPlace(message, lang):
    place_send = message.text
    if place_send != 'stop':
        if place_send == None: place_send = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
        feed_back[str(message.chat.id)].update({"Place" : place_send})
        nextStepWait(person_id = message.chat.id, text = f'{EMJ_PLUS} –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞' 
                                       if lang == 0 else f'{EMJ_PLUS} Hodisa tarixini yozing', func = fdbackDate, args = [lang])
    else: bot.send_message(message.chat.id, f'{EMJ_PLUS} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' if lang == 0 else f'{EMJ_PLUS} Amal bekor qilindi')
def fdbackDate(message, lang):
    date_send = message.text
    if date_send != 'stop':
        feed_back[str(message.chat.id)].update({"Date" : date_send if date_send != None else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'})
        nextStepWait(person_id = message.chat.id, text = f'{EMJ_PLUS} –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–æ—à—ë–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç' 
                                       if lang == 0 else f'{EMJ_PLUS} Ismni yozing yoki ziddiyatga duch kelgan raqibni tariflang', func = fdBack_fill, args = [lang])
    else: bot.send_message(message.chat.id, f'{EMJ_PLUS} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' 
                          if lang == 0 else f'{EMJ_PLUS} Amal bekor qilindi')
def fdBack_fill(message, lang):

    feedback_user = message.text

    if lang:
        if (feedback_user not in [
                    f'{EMJ_WRITING_HAND} –ù–∞–ø–∏—Å–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—É' ,  f'{EMJ_OLD_TELEPHONE} –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    f'{EMJ_EXCLAMATION}Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É'     ,  f'{EMJ_NOTE} –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'          ,
                    f'{EMJ_RAISING_HAND} –û–ø–µ—Ä–∞—Ç–æ—Ä'           ,  f'{EMJ_DISK} –ë–î –ø–µ—Ä–µ–ø–∏—Å–æ–∫'           ,
                    f'{EMJ_INFO} FAQ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'             ,  f'{EMJ_GLOBE} –°–æ—Ü. —Å–µ—Ç–∏'             ,
                    f'{EMJ_TELEPHONE} –¢–µ–ª–µ—Ñ–æ–Ω'               ,  f'{EMJ_HOUSE} –ê–¥—Ä–µ—Å–∞'                ,
                     '% –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É'                                   ,  'stop'                                              ]
            ):
            
            if feedback_user is None: feedback_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'

            feed_back[str(message.chat.id)].update({"FeedBack" : feedback_user})

            txt = (
                  f"--------–ñ–ê–õ–û–ë–ê--------\n"
                  f"id: {str(message.chat.id)}\n"
                  f"–ò–º—è: {feed_back[str(message.chat.id)]['Name']}\n"
                  f"–Ø–∑—ã–∫: {account[str(message.chat.id)].language}\n"
                  f"–ü—Ä–∏—á–∏–Ω–∞: {feed_back[str(message.chat.id)]['Reason']}\n"
                  f"–ú–µ—Å—Ç–æ: {feed_back[str(message.chat.id)]['Place']}\n"
                  f"–î–∞—Ç–∞: {feed_back[str(message.chat.id)]['Date']}\n"
                  f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: {feedback_user}\n---------------------"
            )

            bot.send_message(message.chat.id, f'{EMJ_PLUS} –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Ä–≤–∏—Å–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ SwissLab. –ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞'
                                               ' —Å–¥–µ–ª–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏ –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n'
                                              f'{EMJ_RAISING_HAND} –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!')

            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data = f"Q{str(message.chat.id)}"))
            
            for id_p in all_ids_arr:
                checkBlockedPeople(markup = markup, pers_id = id_p, txt = txt)

            db_answer = insert_feedback(0, message.chat.id, txt)
            bot.send_message(message.chat.id, db_answer)

        elif (
                feedback_user not in [
                    f"{EMJ_OLD_TELEPHONE} O'sha.  qo'llab-quvvatlash" , f'{EMJ_EXCLAMATION} Shikoyat qoldiring',
                    f'{EMJ_GLOBE} Biz ijtimoiy tarmoqlarda'           , f'{EMJ_DISK} Yozishmalar bazasi'       ,
                    f'{EMJ_WRITING_HAND} Direktorga yozing'           , f"{EMJ_INFO} FAQ Ko'rsatma"            ,
                    f'{EMJ_NOTE} buyurtma yaratish'                   , f'{EMJ_TELEPHONE} telefon'             ,
                    f'{EMJ_RAISING_HAND} Operator'                    , f'{EMJ_HOUSE} manzillari'              ,
                     '% Chegirma oling'                                             ,  'stop' 
                ]
             ):

                if feedback_user == None: feedback_user = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç'
                
                feed_back[str(message.chat.id)].update({"FeedBack" : feedback_user})

                txt = (
                    f"--------–ñ–ê–õ–û–ë–ê--------\n"
                    f"id: {str(message.chat.id)}\n"
                    f"–ò–º—è: {feed_back[str(message.chat.id)]['Name']}\n"
                    f"–Ø–∑—ã–∫: {account[str(message.chat.id)].language}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {feed_back[str(message.chat.id)]['Reason']}\n"
                    f"–ú–µ—Å—Ç–æ: {feed_back[str(message.chat.id)]['Place']}\n"
                    f"–î–∞—Ç–∞: {feed_back[str(message.chat.id)]['Date']}\n"
                    f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: {feedback_user}\n---------------------"
                )

                bot.send_message(message.chat.id, f'{EMJ_PLUS} Laboratoriya xizmatini nazorat qilish SwissLab. Biz tanlaganingiz uchun'
                                                   ' tashakkur uchun tashakkur va xizmatimiz sifatini yaxshilashga yordam bersangiz xursand bolamiz!\n'
                                                  f'{EMJ_RAISING_HAND} Agar kerak bolsa, bizning operatorimiz sizga murojaat qiladi!')

                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data = f"Q{str(message.chat.id)}"))

                for id_p in all_ids_arr: checkBlockedPeople(markup = markup, pers_id = id_p, txt = txt)

                db_answer = insert_feedback(0, message.chat.id, txt, bot)
                bot.send_message(message.chat.id, db_answer)

    elif feedback_user == 'stop': bot.send_message(message.chat.id, f'{EMJ_PLUS} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' 
                                                  if lang == 0 else f'{EMJ_PLUS} Amal bekor qilindi')
                                                  
    else: nextStepWait(person_id = message.chat.id, text = f'{EMJ_PLUS} –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ stop' if lang == 0 
                                                      else f'{EMJ_PLUS} Iltimos, sharhingizni togri formatda kiriting yoki yozing stop', func = fdBack_fill, args = [lang])


def enterTag(message, mess):
    global account
    if mess == "new":
        update_account(account = account[str(message.chat.id)], parametr = 'tags', data = [])        
        account = get_accounts()

    account[str(message.chat.id)].tags.append(message.text)
    update_account(account = account[str(message.chat.id)], parametr = 'tags', data = account[str(message.chat.id)].tags)       

    it = len(account[str(message.chat.id)].tags)
    send = bot.send_message(message.chat.id, f"{EMJ_PLUS} –í–≤–µ–¥–µ–Ω–æ {str(it)} –∏–∑ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    if it < 10: bot.register_next_step_handler(send, enterTag, "")
    else: bot.send_message(message.chat.id, f"{EMJ_EXCLAMATION} –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –±–æ—Ç–∞\n"
                                            f"{EMJ_EXCLAMATION} –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /tags")
def enterTag_Sec(message, mess):
    global account
    if mess == "new":
        update_account(account = account[str(message.chat.id)], parametr = 'tags', data = [])        
        account = get_accounts()

    account[str(message.chat.id)].tags.append(message.text)
    update_account(account = account[str(message.chat.id)], parametr = 'tags', data = account[str(message.chat.id)].tags)

    it = len(account[str(message.chat.id)].tags)
    send = bot.send_message(message.chat.id, f"{EMJ_PLUS} Kirilgan {str(it)} 10 foydalanuvchilar")
    if it < 10: bot.register_next_step_handler(send, enterTag_Sec, "")
    else: bot.send_message(message.chat.id, f"{EMJ_EXCLAMATION} Foydalanuvchilar botni aktivlashtirgandan so'ng chegirmaga"
                                             " ega bo'lasiz agar do'stlaringiz ro'yxatini o'zgartirmoqchi bo'lsangiz bosing /tags")


def refAdd(message):
    global account
    account = get_accounts()
    if True in [True for person_id in account.keys() if person_id == message.text]:
        if int(account[message.text].ref) < 10:
            
            account[message.text].ref = str(int(account[message.text].ref) + 1)
            update_account(account = account[message.text], parametr = 'ref', data = str(int(account[message.text].ref) + 1))
            account = get_accounts()
            
            bot.send_message(message.chat.id, f"{EMJ_DONE} –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é!" if langCheck(message) 
                                         else f"{EMJ_DONE} Faollashtirish uchun rahmat!")
            bot.send_message(message.text, f"{EMJ_DONE} –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!" if langCheck(message) 
                                      else f"{EMJ_DONE} Yangi foydalanuvchi tavsiya kodini faollashtirdi!")
                                      
            keyboardRefMaker(message = message, lang = 0 if langCheck(message) else 1)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–µ–Ω—ã" if langCheck(message) else "‚ö†Ô∏è Kodni faollashtirish tugadi")
            keyboardRefMaker(message = message, lang = 0 if langCheck(message) else 1)
    elif message.text == "stop": keyboardRefMaker(message, 0 if langCheck(message) else 1)
    else: nextStepWait(person_id = message.chat.id, text = f'{EMJ_QUESTION} –í–∞—à –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - stop' if langCheck(message) 
                                                      else f'{EMJ_QUESTION} Sizning kodingiz topilmadi, yana porobuyte yoki yozing - stop', func = refAdd)

def userSebdText(message):
    global account
    if message.text != 'stop':
        if langCheck(person_id = account[str(message.chat.id)].feedback_st):
            bot.send_message(account[str(message.chat.id)].feedback_st, f"–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ #{account[str(message.chat.id)].feedback_st} –Ω–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É!üëá")
        else:  
            bot.send_message(account[str(message.chat.id)].feedback_st, f"Sizning shikoyatingizga javob beruvchi operator"
                                                                                 f" #{account[str(message.chat.id)].feedback_st} !üëá")
        if message.photo != None:
            file_info = bot.get_file(message.photo[-1].file_id)
            bot.send_photo(account[str(message.chat.id)].feedback_st, bot.download_file(file_info.file_path))
        if message.text != None or message.caption != None:
            word_user_send = message.text if message.text != None else message.caption
            bot.send_message(account[str(message.chat.id)].feedback_st, word_user_send)
            db_answer = insert_feedback(message.chat.id, int(account[str(message.chat.id)].feedback_st), word_user_send)
            bot.send_message(message.chat.id, db_answer)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        update_account(account = account[account[str(message.chat.id)].feedback_st], parametr = 'feedback_st', data = 'close')
        update_account(account = account[str(message.chat.id)], parametr = 'feedback_st', data = 'close')        
        account = get_accounts()

    else: bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!')


def inlineMessages(markup_text, call : Any    = None, 
                                msg  : Any    = None, 
                                _id  : int    = None, 
                                markup_arr    = [], 
                                action : bool = True) -> None:
    """
    ### This definition makes and pushes markup.
        param: markup_arr = [[text1, callback_data1], 
                             [text2, callback_data2]]
        param: action -> activate delete_message
    """
    try:
        if not _id and msg:
            _id = msg.chat.id
        elif not _id and not msg:
            _id = call.message.chat.id
    
        if action: 
            bot.delete_message(_id, 
                call.message.message_id if call != None 
                else msg.message_id
        )
        markup = types.InlineKeyboardMarkup(row_width = 2)
        markup.add(*[
            types.InlineKeyboardButton(
                text = row[0], 
                callback_data = row[1]
            ) for row in markup_arr]
        )
        bot.send_message(_id, 
            markup_text, reply_markup=markup
        )
    except:
        debug.saveLogs(f'[inlineMessages]---->{traceback.format_exc()}')

def handlingdbCollection(message, call, data = ''):
    for line, row in zip(add_text_dict, dbCollection(message = message, person_id = message.chat.id, step = call_data_dict[call.data][1], action = 'show_data')[-1]):
                data += f"{line} {row}\n"
    bot.send_message(message.chat.id, data)
    inlineMessages(markup_text = '–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', message = message, markup_arr = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç'] 
                                                                                                  if checkOperId(person_id = str(message.chat.id), 
                                                                                                                 action    = collection_oper_ids_arr) 
                                                                                                  else ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], ['–ò–∑–º–µ–Ω–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å']])

def nextStepWait(person_id, text, func, args = None, action = False, message_id = None):
    if action: bot.delete_message(person_id, message_id)
    if args != None: bot.register_next_step_handler(bot.send_message(person_id, text), func, *args)
    else: bot.register_next_step_handler(bot.send_message(person_id, text), func)
#\==================================================================/#


#\==================================================================/#
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global accounts
    try:
        _data : str or Any = call.data
        _id   : int        = call.message.chat.id

        if _data in call_data_dict.keys():

            _key = call_data_dict[_data]

            if _key[0] == 'set_lang':
                update_account(accounts[str(_id)], 'language', _data)

                #accounts = get_accounts()

                inlineMessages(
                    markup_text = openfileforRead(None, _key[1]), 
                    call = call, 
                    markup_arr = _key[2]
                )
            
            elif _key[0] == 'disagree_data':
                bot.delete_message(_id, call.message.message_id)
                bot.send_message(_id, _key[1])
            
            elif _key[0] == 'agree_data':
                inlineMessages(
                    markup_text = _key[1], 
                    call = call, 
                    markup_arr = _key[2]
                )
            
            elif _key[0] == 'no_code':
                bot.delete_message(_id, call.message.message_id)
                keyboardRefMaker(call.message, _key[1])
            
            elif _key[0] == 'has_code':
                nextStepWait(
                    person_id  = _id, 
                    text       = _key[1], 
                    func       = refAdd, 
                    args       = None, 
                    action     = True, 
                    message_id = call.message.message_id
                )
            
            elif _key[0] == 'feedback':
                nextStepWait(
                    person_id  = _id, 
                    text       = _key[1], 
                    func       = fdbackName, 
                    args       = [_key[2]], 
                    action     = True, 
                    message_id = call.message.message_id
                )
            
            elif _key[0] == 'friends_tag':
                nextStepWait(
                    person_id  = _id, 
                    text       = _key[1], 
                    func       = enterTag, 
                    args       = ["new"], 
                    action     = True, 
                    message_id = call.message.message_id
                )
            
            elif _key[0] == 'edit_label':
                inlineMessages(
                    markup_text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–ª–æ–∫–∞', 
                    call        = call, 
                    markup_arr  = _key[1]
                )
            
            elif _key[0] == 'edit_label_sec':
                nextStepWait(
                    person_id  = _id, 
                    text       = f'{EMJ_PLUS} –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è', 
                    func       = saveNewText, 
                    args       = [_key[1]], 
                    action     = True, 
                    message_id = call.message.message_id
                )
            
            elif _key[0] == 'office_edit':
                nextStepWait(
                    person_id  = _id, 
                    text       = f"{EMJ_PLUS} –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                    func       = handlingdbCollection, 
                    args       = [call], 
                    action     = True, 
                    message_id = call.message.message_id
                )
        
        elif _data == 'üëç' or _data == 'üëé':
            bot.delete_message(_id, call.message.message_id)
            bot.send_message(_id, 
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!' if langCheck(person_id = _id) 
                                     else 'Baholash uchun rahmat!'
            )
        elif _data == '–ò–∑–º–µ–Ω–∏—Ç—å': 
            inlineMessages(
                markup_text = '–ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?', 
                call = call, 
                markup_arr = markup_change_collection_arr
            )
        elif _data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç' or _data == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            bot.delete_message(_id, call.message.message_id)
            dbCollection(
                call.message, 
                person_id = _id, 
                action = 'send_collection_to_oper' if _data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç' 
                                                   else 'confirm_collection'
            )
            bot.send_message(_id, 
                '–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' if _data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç' 
                                   else '–û—Ç—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!'
            )
            keyboardRefMaker(
                call.message, 
                0 if langCheck(person_id = str(_id)) else 1, 
                str(_id)
            )
        elif _data[0] == 'Q':
            if accounts[_data[1:]].feedback_st == 'open':
                update_account(
                    accounts[_data[1:]], 
                    'feedback_st',
                    'close'
                )        
                update_account(
                    accounts[str(_id)], 
                    'feedback_st', 
                    _data[1:]
                )
                
                accounts = get_accounts()

                nextStepWait(
                    person_id = _id, 
                    text = f"{EMJ_PLUS} –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", 
                    func = userSebdText
                )
            else:
                bot.send_message(_id, 
                    "–û–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ stop"
                )
                
                update_account(
                    accounts[_data[1:]], 
                    'feedback_st', 
                    'close'
                )        
                update_account(
                    accounts[str(_id)], 
                    'feedback_st', 
                    _data[1:]
                )
                accounts = get_accounts()

                nextStepWait(
                    person_id = _id, 
                    text = f"{EMJ_PLUS} –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", 
                    func = userSebdText
                )
        else:
            if accounts[str(_id)].conversation == 'close':
                for u_id in accounts.keys():
                    if u_id == _data and accounts[u_id].conversation == 'mid':
                        markup = markupMaker(
                            action = 'redirect', 
                            button_text = buttons_oper_text
                        )
                        accounts[str(_id)].tags.append(str(u_id))
                        update_account(
                            accounts[str(_id)], 
                            'tags', 
                            accounts[str(_id)].tags
                        )        
                        update_account(
                            accounts[str(_id)],
                            'conversation', 
                            'open'
                        )
                        update_account(
                            accounts[str(_id)], 
                            'timer_conv', 
                            int(time.time())
                        )
                        accounts[u_id].tags.append(str(_id))
                        accounts[u_id].tags.append("0")
                        update_account(
                            accounts[u_id], 
                            'tags', 
                            accounts[u_id].tags
                        )        
                        update_account(
                            accounts[u_id], 
                            'conversation', 
                            'open'
                        )
                        update_account(
                            accounts[u_id], 
                            'timer_conv', 
                            int(time.time())
                        )
                        accounts = get_accounts()

                        bot.send_message(u_id, 
                            f"{EMJ_TELEPHONE} –ù–∞–π–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä #{str(_id)}, "
                            "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if langCheck(person_id = u_id) 
                            else 
                            f"{EMJ_TELEPHONE} Operator #{str(_id)} topildi, "
                            "yozishmalar faollashtirildi"
                        )
                        
                        bot.send_message(str(_id), 
                            f"{EMJ_TELEPHONE} –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É!",
                            reply_markup=markup
                        )
                        db_answer = insert_message(u_id, _id)

                        bot.send_message(str(u_id), db_answer)
                        bot.send_message(str( _id), db_answer)

                        break

                if accounts[str(_id)].conversation != 'open':
                    if accounts[str(_data)].conversation != 'open':
                        bot.send_message(_id, 
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id: {str(_data)} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–∂–∏–º!\n"
                            "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤..."
                        )
                        
                        markup = markupMaker('redirect', buttons_oper_text)
                        user_markup = markupMaker('person', buttons_oper_text 
                            if langCheck(person_id = str(_data)) else buttons_user_uz_text
                        )
                        
                        accounts[str(_id)].tags.append(str(_data))
                        update_account(
                            accounts[str(_id)], 
                            'tags', 
                            accounts[str(_id)].tags
                        )
                        update_account(
                            accounts[str(_id)], 
                            'conversation', 
                            'open'
                        )
                        update_account(
                            accounts[str(_id)], 
                            'timer_conv', 
                            int(time.time())
                        )

                        accounts[str(_data)].tags.append(str(_id))
                        update_account(
                            accounts[str(_data)], 
                            'tags', 
                            accounts[str(_data)].tags
                        )
                        
                        accounts[str(_data)].tags.append("0")
                        update_account(
                            accounts[str(_data)], 
                            'tags', 
                            accounts[str(_data)].tags
                        )
                        update_account(
                            accounts[str(_data)], 
                            'conversation', 
                            'open')
                        update_account(
                            accounts[str(_data)], 
                            'timer_conv', 
                            int(time.time())
                        )
                        accounts = get_accounts()

                        try:
                            if langCheck(person_id = str(_data)): 
                                bot.send_message(str(_data), 
                                    f"{EMJ_TELEPHONE} –û–ø–µ—Ä–∞—Ç–æ—Ä"
                                    f" #{str(_id)} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É", 
                                    reply_markup=user_markup
                                )
                            else: 
                                bot.send_message(str(_data), 
                                    f"{EMJ_TELEPHONE} Operator #{str(_id)} "
                                    "yozishmalarni faollashtirdi", 
                                    reply_markup=user_markup
                                )

                            bot.send_message(str(_id), 
                                f"{EMJ_TELEPHONE} –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É!", 
                                reply_markup=markup
                            )
                            db_answer = insert_message(_data, _id)

                            bot.send_message(str(_data), db_answer)
                            bot.send_message(str(  _id), db_answer)
                        except:
                            update_account(
                                accounts[str(_id)], 
                                'conversation', 
                                'close'
                            )
                            update_account(accounts[str(_data)], 'tags', [])
                            update_account(accounts[str(  _id)], 'tags', [])

                            accounts = get_accounts()

                            bot.send_message(_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–∏–ª –±–æ—Ç–∞!')
                    else:
                        bot.send_message(str(_id), 
                            "–î—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É!"
                        )
            else:
                bot.send_message(_id, 
                    "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π!"
                )


    except:
        saveLogs(
            f"Error in the 'call' part!\n\n[\n{traceback.format_exc()}\n]"
        )
        for id in label_change_ids_arr:
            bot.send_message(int(id), 
                f"Error in the 'call' part!\n\n{traceback.format_exc()}"
            )
#\==================================================================/#


#\==================================================================/#
if __name__ == '__main__':
    Process(target = P_schedule.start_schedule, args = ()).start()
    try: 
        bot.polling(none_stop=True)
    except:
        saveLogs(f"Program error!\n\n{traceback.format_exc()}")
        try:
            for id in label_change_ids_arr:
                bot.send_message(int(id), 
                    f"Program error!\n\n{traceback.format_exc()}"
                )
        except:
            pass
#\==================================================================/#
